Bootstrap: docker
From: ubuntu:xenial

%post
    export PREFIX=/usr/local
    export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
    export PATH=$PREFIX/bin:$PATH
    export PYTHONPATH=$PREFIX/lib64/python2.6/site-packages
    export LC_ALL=C

    echo "===================================================================================================================="
    echo "installing packages"
    echo "===================================================================================================================="
    echo "deb http://sp.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse" > /etc/apt/sources.list
    echo "deb http://sp.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >>  /etc/apt/sources.list
    echo "deb http://sp.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb http://sp.archive.ubuntu.com/ubuntu/ xenial-proposed main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb http://sp.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse" >>  /etc/apt/sources.list
    apt-get -y update
    apt-get -y  --allow-unauthenticated install openmpi-bin openmpi-bin openmpi-common dapl2-utils libdapl-dev libdapl2 libibverbs1 librdmacm1 libcxgb3-1 libipathverbs1 libmlx4-1 libmlx5-1 libmthca1 libnes1 gcc g++ libopenmpi-dev python build-essential cmake pkgconf gettext libglib2.0-dev m4 automake libxml2-dev git gfortran vim wget unzip python-scipy autotools-dev autoconf
    mkdir /opt/cesga
    mkdir /scratch
    mkdir /opt/fenics
    mkdir /opt/fenics/install
    cd    /opt/fenics/install
    
    echo "===================================================================================================================="
    echo "installing petsc"
    echo "===================================================================================================================="
    git clone https://bitbucket.org/petsc/petsc
    cd petsc
    ./configure COPTFLAGS="-O2" CXXOPTFLAGS="-O2" FOPTFLAGS="-O2" --with-mpi --with-x=0 --with-clanguage=c --with-debugging=0 --with-cc=mpicc --with-fc=mpif90 --prefix=$PREFIX --with-cxx=mpic++ --with-metis --with-parmetis --download-fblaslapack=1 --download-parmetis --download-metis    
    make PETSC_DIR=/opt/fenics/install/petsc PETSC_ARCH=arch-linux2-c-opt all
    make PETSC_DIR=/opt/fenics/install/petsc PETSC_ARCH=arch-linux2-c-opt install
    cd ..	
    

    echo "===================================================================================================================="
    echo "installing UFC"
    echo "===================================================================================================================="
    wget http://www.csc.kth.se/~jjan/hpfem2016/fenics-hpc_hpfem.zip
    unzip fenics-hpc_hpfem.zip
    cd fenics-hpc_hpfem
    cd ufc2-hpc
    rm CMakeCache.txt
    cmake -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX
    make install
    cd ..

    echo "===================================================================================================================="
    echo "installing SymPy, Instant, FIAT, UFL, FFC, OrderedDict"
    echo "===================================================================================================================="
    for pkg in sympy-0.7.5 instant fiat ufl-1.0.0 ffc-1.0.0 ordereddict-1.1
    do
    	cd $pkg
  	python setup.py install --prefix=$PREFIX
  	cd ..
    done


    echo "===================================================================================================================="
    echo "libxml2-2.7.7"
    echo "===================================================================================================================="

    wget http://xmlsoft.org/sources/libxml2-2.7.7.tar.gz
    tar -xvf libxml2-2.7.7.tar.gz

    cd libxml2-2.7.7
    ./configure --prefix=$PREFIX --enable-static --disable-shared --with-pic --host=x86_64-unknown-linux-gnu
    make install
    cd ..

    echo "===================================================================================================================="
    echo "installing GTS"
    echo "===================================================================================================================="
    mkdir gts
    cd gts
    wget pkgs.fedoraproject.org/lookaside/pkgs/gts/gts-snapshot-121130.tar.gz/023ebb6b13b8707534182a3ef0d12908/gts-snapshot-121130.tar.gz
    tar xzvf gts-snapshot-121130.tar.gz
    cd gts-snapshot-121130
    sed -i "/s/Requires: glib-2.0,gthread-2.0,gmodule-2.0/Requires: glib-2.0/g" gts.pc.in
    ./configure --prefix=$PREFIX --enable-static --disable-shared --with-glib-prefix=$PREFIX --with-pic
    make install
    make
    cd ../../
   
    echo "===================================================================================================================="
    echo "installing DOLFIN"
    echo "===================================================================================================================="
    mv dolfin-hpc dolfin-hpc_x
    git clone https://bitbucket.org/fenics-hpc/dolfin-hpc.git
    cd dolfin-hpc
    # git fetch  && git checkout next
    
    git fetch  && git checkout VAWT
    
    ./regen.sh

    ./configure   CC=mpicc CXX=mpicxx CFLAGS="-O2" CXXFLAGS="-O2" --prefix=$PREFIX --with-pic --disable-boost-tr1 --with-parmetis --with-petsc --enable-mpi --enable-mpi-io --disable-progress-bar --disable-xmltest --enable-ufl --with-petsc=/usr/local --with-gts --with-xml --with-gts --host=x86_64-unknown-linux-gnu --with-xml-prefix=$PREFIX --with-xml-exec-prefix=$PREFIX --enable-static 
    make install
    cd .. 

    mkdir -p $PREFIX/lib64/python2.6/site-packages
    cp -av dolfin-hpc/site-packages/dolfin_utils $PREFIX/lib64/python2.6/site-packages

    #echo "===================================================================================================================="
    #echo "installing UNICORN"
    #echo "===================================================================================================================="
    #mv unicorn-minimal unicorn_x
    #git clone https://bitbucket.org/fenics-hpc/unicorn.git
    #cd unicorn
    #git fetch && git checkout next
    
    #while read pkg; do
      #cd $pkg
      #make UNICORNLIBDIR=$PWD/.. 
      #cd ..
    #done < CI_directories
    #cd ..
    
    echo "===================================================================================================================="
    echo "installing DOLFIN_POST"
    echo "===================================================================================================================="

    git clone https://bitbucket.org/fenics-hpc/dolfin-post.git
    cd dolfin-post
    ./regen.sh
    ./configure --prefix=$PREFIX
    make install

%environment
    export PREFIX=/usr/local
    export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
    export PATH=$PREFIX/bin:$PATH
    export PYTHONPATH=$PREFIX/lib64/python2.6/site-packages
    export LC_ALL=C
