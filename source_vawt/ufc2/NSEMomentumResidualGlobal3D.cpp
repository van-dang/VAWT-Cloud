// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEMomentumResidualGlobal3D.h"

/// Constructor
nsemomentumresidualglobal3d_finite_element_0::nsemomentumresidualglobal3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_finite_element_0::~nsemomentumresidualglobal3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentumresidualglobal3d_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape nsemomentumresidualglobal3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentumresidualglobal3d_finite_element_0::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int nsemomentumresidualglobal3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentumresidualglobal3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentumresidualglobal3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentumresidualglobal3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentumresidualglobal3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentumresidualglobal3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentumresidualglobal3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentumresidualglobal3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_0::create() const
{
    return new nsemomentumresidualglobal3d_finite_element_0();
}
#endif


/// Constructor
nsemomentumresidualglobal3d_finite_element_1::nsemomentumresidualglobal3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_finite_element_1::~nsemomentumresidualglobal3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentumresidualglobal3d_finite_element_1::signature() const
{
    return "VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return the cell shape
ufc::shape nsemomentumresidualglobal3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentumresidualglobal3d_finite_element_1::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int nsemomentumresidualglobal3d_finite_element_1::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentumresidualglobal3d_finite_element_1::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentumresidualglobal3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentumresidualglobal3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

/// Interpolate vertex values from dof values
void nsemomentumresidualglobal3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentumresidualglobal3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentumresidualglobal3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentumresidualglobal3d_finite_element_1::num_sub_elements() const
{
    return 3;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_1::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_finite_element_0();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_finite_element_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_finite_element_0();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_1::create() const
{
    return new nsemomentumresidualglobal3d_finite_element_1();
}
#endif


/// Constructor
nsemomentumresidualglobal3d_finite_element_2::nsemomentumresidualglobal3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_finite_element_2::~nsemomentumresidualglobal3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentumresidualglobal3d_finite_element_2::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape nsemomentumresidualglobal3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentumresidualglobal3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentumresidualglobal3d_finite_element_2::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsemomentumresidualglobal3d_finite_element_2::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentumresidualglobal3d_finite_element_2::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentumresidualglobal3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentumresidualglobal3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsemomentumresidualglobal3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentumresidualglobal3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentumresidualglobal3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentumresidualglobal3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentumresidualglobal3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentumresidualglobal3d_finite_element_2::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_2::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentumresidualglobal3d_finite_element_2::create() const
{
    return new nsemomentumresidualglobal3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentumresidualglobal3d_dofmap_0::nsemomentumresidualglobal3d_dofmap_0() : ufc::dofmap()
#else
nsemomentumresidualglobal3d_dofmap_0::nsemomentumresidualglobal3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentumresidualglobal3d_dofmap_0::~nsemomentumresidualglobal3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentumresidualglobal3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentumresidualglobal3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentumresidualglobal3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentumresidualglobal3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentumresidualglobal3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_0::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_0::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentumresidualglobal3d_dofmap_0::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentumresidualglobal3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentumresidualglobal3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentumresidualglobal3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentumresidualglobal3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentumresidualglobal3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_0::create() const
{
    return new nsemomentumresidualglobal3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentumresidualglobal3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentumresidualglobal3d_dofmap_1::nsemomentumresidualglobal3d_dofmap_1() : ufc::dofmap()
#else
nsemomentumresidualglobal3d_dofmap_1::nsemomentumresidualglobal3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentumresidualglobal3d_dofmap_1::~nsemomentumresidualglobal3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentumresidualglobal3d_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentumresidualglobal3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentumresidualglobal3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 3*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentumresidualglobal3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentumresidualglobal3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_1::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_1::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentumresidualglobal3d_dofmap_1::num_facet_dofs() const
{
    return 9;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentumresidualglobal3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentumresidualglobal3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentumresidualglobal3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentumresidualglobal3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentumresidualglobal3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_1::create() const
{
    return new nsemomentumresidualglobal3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_1::num_sub_dof_maps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentumresidualglobal3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentumresidualglobal3d_dofmap_2::nsemomentumresidualglobal3d_dofmap_2() : ufc::dofmap()
#else
nsemomentumresidualglobal3d_dofmap_2::nsemomentumresidualglobal3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentumresidualglobal3d_dofmap_2::~nsemomentumresidualglobal3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentumresidualglobal3d_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentumresidualglobal3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentumresidualglobal3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentumresidualglobal3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentumresidualglobal3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentumresidualglobal3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_2::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentumresidualglobal3d_dofmap_2::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentumresidualglobal3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentumresidualglobal3d_dofmap_2::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentumresidualglobal3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentumresidualglobal3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentumresidualglobal3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentumresidualglobal3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentumresidualglobal3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentumresidualglobal3d_dofmap_2::create() const
{
    return new nsemomentumresidualglobal3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentumresidualglobal3d_dofmap_2::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentumresidualglobal3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor
nsemomentumresidualglobal3d_cell_integral_0_0::nsemomentumresidualglobal3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_cell_integral_0_0::~nsemomentumresidualglobal3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentumresidualglobal3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Value of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[4][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 1; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 1186.
    double G[305];
    G[0] = 0.0625*K_00*K_00*det*w[2][0];
    G[1] = 0.125*K_00*K_10*det*w[2][0];
    G[2] = 0.125*K_00*K_20*det*w[2][0];
    G[3] = 0.125*K_00*K_00*det*w[2][0];
    G[4] = 0.0625*K_10*K_10*det*w[2][0];
    G[5] = 0.125*K_10*K_20*det*w[2][0];
    G[6] = 0.125*K_10*K_10*det*w[2][0];
    G[7] = 0.5*K_00*det*w[2][0]/w[3][0];
    G[8] = 0.0625*K_20*K_20*det*w[2][0];
    G[9] = 0.125*K_20*K_20*det*w[2][0];
    G[10] = 0.5*K_10*det*w[2][0]/w[3][0];
    G[11] = 0.5*K_20*det*w[2][0]/w[3][0];
    G[12] = det*w[2][0]/(w[3][0]*w[3][0]);
    G[13] = 0.25*K_00*K_10*det*w[2][0];
    G[14] = 0.25*K_00*K_20*det*w[2][0];
    G[15] = 0.25*K_00*K_00*det*w[2][0];
    G[16] = 0.25*K_10*K_20*det*w[2][0];
    G[17] = 0.25*K_10*K_10*det*w[2][0];
    G[18] = 0.0;
    G[19] = 0.25*K_20*K_20*det*w[2][0];
    G[20] = 0.0;
    G[21] = 0.0;
    G[22] = -2.0*det*w[2][0]/(w[3][0]*w[3][0]);
    G[23] = 0.125*K_00*K_01*det*w[2][0];
    G[24] = 0.125*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[25] = 0.125*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[26] = 0.25*K_00*K_01*det*w[2][0];
    G[27] = -0.5*K_00*det*w[2][0]/w[3][0];
    G[28] = 0.125*K_10*K_11*det*w[2][0];
    G[29] = 0.125*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[30] = 0.25*K_10*K_11*det*w[2][0];
    G[31] = -0.5*K_10*det*w[2][0]/w[3][0];
    G[32] = 0.5*K_01*det*w[2][0]/w[3][0];
    G[33] = 0.125*K_20*K_21*det*w[2][0];
    G[34] = 0.25*K_20*K_21*det*w[2][0];
    G[35] = -0.5*K_20*det*w[2][0]/w[3][0];
    G[36] = 0.5*K_11*det*w[2][0]/w[3][0];
    G[37] = 0.5*K_21*det*w[2][0]/w[3][0];
    G[38] = -0.25*K_00*K_01*det*w[2][0];
    G[39] = -0.25*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[40] = -0.25*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[41] = -0.5*K_00*K_01*det*w[2][0];
    G[42] = -0.25*K_10*K_11*det*w[2][0];
    G[43] = -0.25*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[44] = -0.5*K_10*K_11*det*w[2][0];
    G[45] =  - K_01*det*w[2][0]/w[3][0];
    G[46] = -0.25*K_20*K_21*det*w[2][0];
    G[47] = -0.5*K_20*K_21*det*w[2][0];
    G[48] =  - K_11*det*w[2][0]/w[3][0];
    G[49] =  - K_21*det*w[2][0]/w[3][0];
    G[50] = 0.125*K_00*K_02*det*w[2][0];
    G[51] = 0.125*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[52] = 0.125*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[53] = 0.25*K_00*K_02*det*w[2][0];
    G[54] = 0.125*K_10*K_12*det*w[2][0];
    G[55] = 0.125*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[56] = 0.25*K_10*K_12*det*w[2][0];
    G[57] = 0.5*K_02*det*w[2][0]/w[3][0];
    G[58] = 0.125*K_20*K_22*det*w[2][0];
    G[59] = 0.25*K_20*K_22*det*w[2][0];
    G[60] = 0.5*K_12*det*w[2][0]/w[3][0];
    G[61] = 0.5*K_22*det*w[2][0]/w[3][0];
    G[62] = -0.25*K_00*K_02*det*w[2][0];
    G[63] = -0.25*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[64] = -0.25*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[65] = -0.5*K_00*K_02*det*w[2][0];
    G[66] = -0.25*K_10*K_12*det*w[2][0];
    G[67] = -0.25*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[68] = -0.5*K_10*K_12*det*w[2][0];
    G[69] =  - K_02*det*w[2][0]/w[3][0];
    G[70] = -0.25*K_20*K_22*det*w[2][0];
    G[71] = -0.5*K_20*K_22*det*w[2][0];
    G[72] =  - K_12*det*w[2][0]/w[3][0];
    G[73] =  - K_22*det*w[2][0]/w[3][0];
    G[74] = 0.5*K_00*K_01*det*w[2][0];
    G[75] = 0.5*K_01*K_10*det*w[2][0];
    G[76] = 0.5*K_00*K_00*det*w[2][0];
    G[77] = 0.5*K_01*K_20*det*w[2][0];
    G[78] = 0.5*K_00*K_02*det*w[2][0];
    G[79] = 0.5*K_02*K_10*det*w[2][0];
    G[80] = 0.5*K_02*K_20*det*w[2][0];
    G[81] = 0.5*K_00*K_10*det*w[2][0];
    G[82] = 0.5*K_00*K_20*det*w[2][0];
    G[83] = 2.0*K_00*det*w[2][0]/w[3][0];
    G[84] = 0.5*K_00*K_11*det*w[2][0];
    G[85] = 0.5*K_10*K_11*det*w[2][0];
    G[86] = 0.5*K_11*K_20*det*w[2][0];
    G[87] = 0.5*K_00*K_12*det*w[2][0];
    G[88] = 0.5*K_10*K_12*det*w[2][0];
    G[89] = 0.5*K_12*K_20*det*w[2][0];
    G[90] = 0.5*K_10*K_10*det*w[2][0];
    G[91] = 0.5*K_10*K_20*det*w[2][0];
    G[92] = 2.0*K_10*det*w[2][0]/w[3][0];
    G[93] = 0.5*K_00*K_21*det*w[2][0];
    G[94] = 0.5*K_10*K_21*det*w[2][0];
    G[95] = 0.5*K_20*K_21*det*w[2][0];
    G[96] = 0.5*K_00*K_22*det*w[2][0];
    G[97] = 0.5*K_10*K_22*det*w[2][0];
    G[98] = 0.5*K_20*K_22*det*w[2][0];
    G[99] = 0.5*K_20*K_20*det*w[2][0];
    G[100] = 2.0*K_20*det*w[2][0]/w[3][0];
    G[101] = -0.25*K_00*K_00*det*w[2][0];
    G[102] = -0.5*K_00*K_10*det*w[2][0];
    G[103] = -0.5*K_00*K_20*det*w[2][0];
    G[104] = -0.5*K_00*K_00*det*w[2][0];
    G[105] = -0.25*K_10*K_10*det*w[2][0];
    G[106] = -0.5*K_10*K_20*det*w[2][0];
    G[107] = -0.5*K_10*K_10*det*w[2][0];
    G[108] =  - K_00*det*w[2][0]/w[3][0];
    G[109] = -0.25*K_20*K_20*det*w[2][0];
    G[110] = -0.5*K_20*K_20*det*w[2][0];
    G[111] =  - K_10*det*w[2][0]/w[3][0];
    G[112] =  - K_20*det*w[2][0]/w[3][0];
    G[113] = -0.5*K_01*det*w[2][0]/w[3][0];
    G[114] = -0.5*K_11*det*w[2][0]/w[3][0];
    G[115] = -0.5*K_21*det*w[2][0]/w[3][0];
    G[116] = K_01*det*w[2][0]/w[3][0];
    G[117] = K_11*det*w[2][0]/w[3][0];
    G[118] = K_21*det*w[2][0]/w[3][0];
    G[119] = -0.5*K_02*det*w[2][0]/w[3][0];
    G[120] = -0.5*K_12*det*w[2][0]/w[3][0];
    G[121] = -0.5*K_22*det*w[2][0]/w[3][0];
    G[122] = K_02*det*w[2][0]/w[3][0];
    G[123] = K_12*det*w[2][0]/w[3][0];
    G[124] = K_22*det*w[2][0]/w[3][0];
    G[125] = -2.0*K_00*det*w[2][0]/w[3][0];
    G[126] = -2.0*K_10*det*w[2][0]/w[3][0];
    G[127] = -2.0*K_20*det*w[2][0]/w[3][0];
    G[128] = K_00*det*w[2][0]/w[3][0];
    G[129] = K_10*det*w[2][0]/w[3][0];
    G[130] = K_20*det*w[2][0]/w[3][0];
    G[131] = 0.0625*K_01*K_01*det*w[2][0];
    G[132] = 0.125*K_01*K_11*det*w[2][0];
    G[133] = 0.125*K_01*K_21*det*w[2][0];
    G[134] = 0.125*K_01*K_01*det*w[2][0];
    G[135] = 0.0625*K_11*K_11*det*w[2][0];
    G[136] = 0.125*K_11*K_21*det*w[2][0];
    G[137] = 0.125*K_11*K_11*det*w[2][0];
    G[138] = 0.0625*K_21*K_21*det*w[2][0];
    G[139] = 0.125*K_21*K_21*det*w[2][0];
    G[140] = -0.25*K_01*K_01*det*w[2][0];
    G[141] = -0.5*K_01*K_11*det*w[2][0];
    G[142] = -0.5*K_01*K_21*det*w[2][0];
    G[143] = -0.5*K_01*K_01*det*w[2][0];
    G[144] = -0.25*K_11*K_11*det*w[2][0];
    G[145] = -0.5*K_11*K_21*det*w[2][0];
    G[146] = -0.5*K_11*K_11*det*w[2][0];
    G[147] = -0.25*K_21*K_21*det*w[2][0];
    G[148] = -0.5*K_21*K_21*det*w[2][0];
    G[149] = 0.125*K_01*K_02*det*w[2][0];
    G[150] = 0.125*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[151] = 0.125*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[152] = 0.25*K_01*K_02*det*w[2][0];
    G[153] = 0.125*K_11*K_12*det*w[2][0];
    G[154] = 0.125*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[155] = 0.25*K_11*K_12*det*w[2][0];
    G[156] = 0.125*K_21*K_22*det*w[2][0];
    G[157] = 0.25*K_21*K_22*det*w[2][0];
    G[158] = -0.25*K_01*K_02*det*w[2][0];
    G[159] = -0.25*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[160] = -0.25*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[161] = -0.5*K_01*K_02*det*w[2][0];
    G[162] = -0.25*K_11*K_12*det*w[2][0];
    G[163] = -0.25*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[164] = -0.5*K_11*K_12*det*w[2][0];
    G[165] = -0.25*K_21*K_22*det*w[2][0];
    G[166] = -0.5*K_21*K_22*det*w[2][0];
    G[167] = 0.5*K_01*K_01*det*w[2][0];
    G[168] = 0.5*K_01*K_11*det*w[2][0];
    G[169] = 0.5*K_01*K_21*det*w[2][0];
    G[170] = 0.5*K_01*K_02*det*w[2][0];
    G[171] = 0.5*K_02*K_11*det*w[2][0];
    G[172] = 0.5*K_02*K_21*det*w[2][0];
    G[173] = -2.0*K_01*det*w[2][0]/w[3][0];
    G[174] = 0.5*K_11*K_11*det*w[2][0];
    G[175] = 0.5*K_11*K_21*det*w[2][0];
    G[176] = 0.5*K_01*K_12*det*w[2][0];
    G[177] = 0.5*K_11*K_12*det*w[2][0];
    G[178] = 0.5*K_12*K_21*det*w[2][0];
    G[179] = -2.0*K_11*det*w[2][0]/w[3][0];
    G[180] = 0.5*K_21*K_21*det*w[2][0];
    G[181] = 0.5*K_01*K_22*det*w[2][0];
    G[182] = 0.5*K_11*K_22*det*w[2][0];
    G[183] = 0.5*K_21*K_22*det*w[2][0];
    G[184] = -2.0*K_21*det*w[2][0]/w[3][0];
    G[185] = 0.25*K_01*K_11*det*w[2][0];
    G[186] = 0.25*K_01*K_21*det*w[2][0];
    G[187] = 0.25*K_01*K_01*det*w[2][0];
    G[188] = 0.0;
    G[189] = 0.25*K_11*K_21*det*w[2][0];
    G[190] = 0.25*K_11*K_11*det*w[2][0];
    G[191] = 0.0;
    G[192] = 0.25*K_21*K_21*det*w[2][0];
    G[193] = 0.0;
    G[194] = 0.5*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[195] = 0.5*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[196] = K_01*K_02*det*w[2][0];
    G[197] = 0.5*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[198] = K_11*K_12*det*w[2][0];
    G[199] = K_21*K_22*det*w[2][0];
    G[200] =  - K_01*K_01*det*w[2][0];
    G[201] =  - K_01*K_11*det*w[2][0];
    G[202] =  - K_00*K_01*det*w[2][0];
    G[203] =  - K_01*K_21*det*w[2][0];
    G[204] =  - K_01*K_02*det*w[2][0];
    G[205] =  - K_02*K_11*det*w[2][0];
    G[206] =  - K_02*K_21*det*w[2][0];
    G[207] =  - K_00*K_11*det*w[2][0];
    G[208] =  - K_00*K_21*det*w[2][0];
    G[209] =  - K_11*K_11*det*w[2][0];
    G[210] =  - K_01*K_10*det*w[2][0];
    G[211] =  - K_11*K_21*det*w[2][0];
    G[212] =  - K_01*K_12*det*w[2][0];
    G[213] =  - K_11*K_12*det*w[2][0];
    G[214] =  - K_12*K_21*det*w[2][0];
    G[215] =  - K_10*K_11*det*w[2][0];
    G[216] =  - K_10*K_21*det*w[2][0];
    G[217] =  - K_01*K_20*det*w[2][0];
    G[218] =  - K_21*K_21*det*w[2][0];
    G[219] =  - K_01*K_22*det*w[2][0];
    G[220] =  - K_11*K_22*det*w[2][0];
    G[221] =  - K_21*K_22*det*w[2][0];
    G[222] =  - K_11*K_20*det*w[2][0];
    G[223] =  - K_20*K_21*det*w[2][0];
    G[224] = 0.5*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[225] = 0.5*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[226] = K_00*K_01*det*w[2][0];
    G[227] = 0.5*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[228] = K_10*K_11*det*w[2][0];
    G[229] = K_20*K_21*det*w[2][0];
    G[230] = 0.0625*K_02*K_02*det*w[2][0];
    G[231] = 0.125*K_02*K_12*det*w[2][0];
    G[232] = 0.125*K_02*K_22*det*w[2][0];
    G[233] = 0.125*K_02*K_02*det*w[2][0];
    G[234] = 0.0625*K_12*K_12*det*w[2][0];
    G[235] = 0.125*K_12*K_22*det*w[2][0];
    G[236] = 0.125*K_12*K_12*det*w[2][0];
    G[237] = 0.0625*K_22*K_22*det*w[2][0];
    G[238] = 0.125*K_22*K_22*det*w[2][0];
    G[239] = 0.25*K_02*K_12*det*w[2][0];
    G[240] = 0.25*K_02*K_22*det*w[2][0];
    G[241] = 0.25*K_02*K_02*det*w[2][0];
    G[242] = 0.25*K_12*K_22*det*w[2][0];
    G[243] = 0.25*K_12*K_12*det*w[2][0];
    G[244] = 0.25*K_22*K_22*det*w[2][0];
    G[245] = 0.0;
    G[246] = 0.0;
    G[247] = 0.0;
    G[248] = -0.25*K_02*K_02*det*w[2][0];
    G[249] = -0.5*K_02*K_12*det*w[2][0];
    G[250] = -0.5*K_02*K_22*det*w[2][0];
    G[251] = -0.5*K_02*K_02*det*w[2][0];
    G[252] = -0.25*K_12*K_12*det*w[2][0];
    G[253] = -0.5*K_12*K_22*det*w[2][0];
    G[254] = -0.5*K_12*K_12*det*w[2][0];
    G[255] = -0.25*K_22*K_22*det*w[2][0];
    G[256] = -0.5*K_22*K_22*det*w[2][0];
    G[257] = 0.5*K_02*K_02*det*w[2][0];
    G[258] = 0.5*K_02*K_12*det*w[2][0];
    G[259] = 0.5*K_02*K_22*det*w[2][0];
    G[260] = 2.0*K_02*det*w[2][0]/w[3][0];
    G[261] = 0.5*K_12*K_12*det*w[2][0];
    G[262] = 0.5*K_12*K_22*det*w[2][0];
    G[263] = 2.0*K_12*det*w[2][0]/w[3][0];
    G[264] = 0.5*K_22*K_22*det*w[2][0];
    G[265] = 2.0*K_22*det*w[2][0]/w[3][0];
    G[266] = -2.0*K_02*det*w[2][0]/w[3][0];
    G[267] = -2.0*K_12*det*w[2][0]/w[3][0];
    G[268] = -2.0*K_22*det*w[2][0]/w[3][0];
    G[269] =  - K_00*K_02*det*w[2][0];
    G[270] =  - K_02*K_02*det*w[2][0];
    G[271] =  - K_02*K_12*det*w[2][0];
    G[272] =  - K_02*K_22*det*w[2][0];
    G[273] =  - K_00*K_12*det*w[2][0];
    G[274] =  - K_00*K_22*det*w[2][0];
    G[275] =  - K_02*K_10*det*w[2][0];
    G[276] =  - K_12*K_12*det*w[2][0];
    G[277] =  - K_12*K_22*det*w[2][0];
    G[278] =  - K_10*K_12*det*w[2][0];
    G[279] =  - K_10*K_22*det*w[2][0];
    G[280] =  - K_02*K_20*det*w[2][0];
    G[281] =  - K_22*K_22*det*w[2][0];
    G[282] =  - K_12*K_20*det*w[2][0];
    G[283] =  - K_20*K_22*det*w[2][0];
    G[284] = 0.5*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[285] = 0.5*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[286] = K_00*K_02*det*w[2][0];
    G[287] = 0.5*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[288] = K_10*K_12*det*w[2][0];
    G[289] = K_20*K_22*det*w[2][0];
    G[290] = det*w[2][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[291] = 2.0*det*w[2][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[292] = 2.0*det*w[2][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[293] =  - K_00*K_00*det*w[2][0];
    G[294] =  - K_00*K_10*det*w[2][0];
    G[295] =  - K_00*K_20*det*w[2][0];
    G[296] = 2.0*K_01*det*w[2][0]/w[3][0];
    G[297] = det*w[2][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[298] = 2.0*det*w[2][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[299] =  - K_10*K_10*det*w[2][0];
    G[300] =  - K_10*K_20*det*w[2][0];
    G[301] = 2.0*K_11*det*w[2][0]/w[3][0];
    G[302] = det*w[2][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[303] =  - K_20*K_20*det*w[2][0];
    G[304] = 2.0*K_21*det*w[2][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 26936
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      
      // Total number of operations to compute function values = 84
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F3 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F4 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F5 += FE0_D001[ip][r]*w[4][nzc6[r]];
        F6 += FE0_D001[ip][r]*w[4][nzc5[r]];
        F7 += FE0_D001[ip][r]*w[4][nzc4[r]];
        F15 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F16 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F17 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F18 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F19 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F21 += FE0_D001[ip][r]*w[4][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[4][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[4][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F25 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F26 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F27 += FE0_D001[ip][r]*w[4][nzc14[r]];
        F28 += FE0_D001[ip][r]*w[4][nzc13[r]];
        F29 += FE0_D001[ip][r]*w[4][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 72
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc3[r]];
        F1 += FE0[ip][r]*w[4][nzc3[r]];
        F8 += FE0[ip][r]*w[5][nzc3[r]];
        F9 += FE0[ip][r]*w[0][nzc7[r]];
        F10 += FE0[ip][r]*w[4][nzc7[r]];
        F11 += FE0[ip][r]*w[5][nzc7[r]];
        F12 += FE0[ip][r]*w[0][nzc11[r]];
        F13 += FE0[ip][r]*w[4][nzc11[r]];
        F14 += FE0[ip][r]*w[5][nzc11[r]];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 6577
      double I[1];
      // Number of operations: 6577
      I[0] = W4[ip]*(F0*(F0*(G[12] + G[0]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[10]*(F3 + F6) + G[11]*(F4 + F7) + G[1]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[2]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[3]*(F18*F21 + F2*F5 + F24*F27) + G[4]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[5]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[6]*(F19*F22 + F25*F28 + F3*F6) + G[7]*(F2 + F5) + G[8]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[9]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[45]*(F2 + F5) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7) + G[48]*(F3 + F6) + G[49]*(F4 + F7)) + F14*(G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[69]*(F2 + F5) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7) + G[72]*(F3 + F6) + G[73]*(F4 + F7)) + F15*(G[83] + G[74]*(F18 + F21) + G[75]*(F19 + F22) + G[76]*(F2 + F5) + G[77]*(F20 + F23) + G[78]*(F24 + F27) + G[79]*(F25 + F28) + G[80]*(F26 + F29) + G[81]*(F3 + F6) + G[82]*(F4 + F7)) + F16*(G[92] + G[81]*(F2 + F5) + G[84]*(F18 + F21) + G[85]*(F19 + F22) + G[86]*(F20 + F23) + G[87]*(F24 + F27) + G[88]*(F25 + F28) + G[89]*(F26 + F29) + G[90]*(F3 + F6) + G[91]*(F4 + F7)) + F17*(G[100] + G[82]*(F2 + F5) + G[91]*(F3 + F6) + G[93]*(F18 + F21) + G[94]*(F19 + F22) + G[95]*(F20 + F23) + G[96]*(F24 + F27) + G[97]*(F25 + F28) + G[98]*(F26 + F29) + G[99]*(F4 + F7)) + F8*(G[101]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[102]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[103]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[104]*(F18*F21 + F2*F5 + F24*F27) + G[105]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[106]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[107]*(F19*F22 + F25*F28 + F3*F6) + G[108]*(F2 + F5) + G[109]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[110]*(F20*F23 + F26*F29 + F4*F7) + G[111]*(F3 + F6) + G[112]*(F4 + F7))) + F1*(F0*(G[22] + G[13]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[14]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[15]*(F18*F21 + F2*F5 + F24*F27) + G[16]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[17]*(F19*F22 + F25*F28 + F3*F6) + G[18]*(F2 + F5) + G[19]*(F20*F23 + F26*F29 + F4*F7) + G[20]*(F3 + F6) + G[21]*(F4 + F7) + G[3]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[6]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[9]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F1*(G[12] + G[0]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[1]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[27]*(F2 + F5) + G[2]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[31]*(F3 + F6) + G[35]*(F4 + F7) + G[3]*(F18*F21 + F2*F5 + F24*F27) + G[4]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[5]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[6]*(F19*F22 + F25*F28 + F3*F6) + G[8]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[9]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F2 + F5) + G[117]*(F3 + F6) + G[118]*(F4 + F7) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F2 + F5) + G[123]*(F3 + F6) + G[124]*(F4 + F7) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[125] + G[74]*(F18 + F21) + G[75]*(F19 + F22) + G[76]*(F2 + F5) + G[77]*(F20 + F23) + G[78]*(F24 + F27) + G[79]*(F25 + F28) + G[80]*(F26 + F29) + G[81]*(F3 + F6) + G[82]*(F4 + F7)) + F16*(G[126] + G[81]*(F2 + F5) + G[84]*(F18 + F21) + G[85]*(F19 + F22) + G[86]*(F20 + F23) + G[87]*(F24 + F27) + G[88]*(F25 + F28) + G[89]*(F26 + F29) + G[90]*(F3 + F6) + G[91]*(F4 + F7)) + F17*(G[127] + G[82]*(F2 + F5) + G[91]*(F3 + F6) + G[93]*(F18 + F21) + G[94]*(F19 + F22) + G[95]*(F20 + F23) + G[96]*(F24 + F27) + G[97]*(F25 + F28) + G[98]*(F26 + F29) + G[99]*(F4 + F7)) + F8*(G[101]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[102]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[103]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[104]*(F18*F21 + F2*F5 + F24*F27) + G[105]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[106]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[107]*(F19*F22 + F25*F28 + F3*F6) + G[109]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[110]*(F20*F23 + F26*F29 + F4*F7) + G[128]*(F2 + F5) + G[129]*(F3 + F6) + G[130]*(F4 + F7))) + F10*(F0*(G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[27]*(F18 + F21) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[31]*(F19 + F22) + G[32]*(F2 + F5) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[35]*(F20 + F23) + G[36]*(F3 + F6) + G[37]*(F4 + F7)) + F1*(G[113]*(F2 + F5) + G[114]*(F3 + F6) + G[115]*(F4 + F7) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[27]*(F18 + F21) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[31]*(F19 + F22) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[35]*(F20 + F23)) + F10*(G[12] + G[113]*(F18 + F21) + G[114]*(F19 + F22) + G[115]*(F20 + F23) + G[131]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[132]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[133]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[134]*(F18*F21 + F2*F5 + F24*F27) + G[135]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[136]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[137]*(F19*F22 + F25*F28 + F3*F6) + G[138]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[139]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F18 + F21) + G[117]*(F19 + F22) + G[118]*(F20 + F23) + G[140]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[141]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[142]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[143]*(F18*F21 + F2*F5 + F24*F27) + G[144]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[145]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[146]*(F19*F22 + F25*F28 + F3*F6) + G[147]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[148]*(F20*F23 + F26*F29 + F4*F7)) + F12*(G[119]*(F18 + F21) + G[120]*(F19 + F22) + G[121]*(F20 + F23) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F24 + F27) + G[36]*(F25 + F28) + G[37]*(F26 + F29)) + F13*(G[113]*(F24 + F27) + G[114]*(F25 + F28) + G[115]*(F26 + F29) + G[119]*(F18 + F21) + G[120]*(F19 + F22) + G[121]*(F20 + F23) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F18 + F21) + G[123]*(F19 + F22) + G[124]*(F20 + F23) + G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[173] + G[167]*(F18 + F21) + G[168]*(F19 + F22) + G[169]*(F20 + F23) + G[170]*(F24 + F27) + G[171]*(F25 + F28) + G[172]*(F26 + F29) + G[74]*(F2 + F5) + G[84]*(F3 + F6) + G[93]*(F4 + F7)) + F16*(G[179] + G[168]*(F18 + F21) + G[174]*(F19 + F22) + G[175]*(F20 + F23) + G[176]*(F24 + F27) + G[177]*(F25 + F28) + G[178]*(F26 + F29) + G[75]*(F2 + F5) + G[85]*(F3 + F6) + G[94]*(F4 + F7)) + F17*(G[184] + G[169]*(F18 + F21) + G[175]*(F19 + F22) + G[180]*(F20 + F23) + G[181]*(F24 + F27) + G[182]*(F25 + F28) + G[183]*(F26 + F29) + G[77]*(F2 + F5) + G[86]*(F3 + F6) + G[95]*(F4 + F7)) + F8*(G[128]*(F18 + F21) + G[129]*(F19 + F22) + G[130]*(F20 + F23) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7))) + F11*(F15*(G[200]*(F18 + F21) + G[201]*(F19 + F22) + G[202]*(F2 + F5) + G[203]*(F20 + F23) + G[204]*(F24 + F27) + G[205]*(F25 + F28) + G[206]*(F26 + F29) + G[207]*(F3 + F6) + G[208]*(F4 + F7)) + F16*(G[201]*(F18 + F21) + G[209]*(F19 + F22) + G[210]*(F2 + F5) + G[211]*(F20 + F23) + G[212]*(F24 + F27) + G[213]*(F25 + F28) + G[214]*(F26 + F29) + G[215]*(F3 + F6) + G[216]*(F4 + F7))) + F11*F11*(G[167]*(F18*F21 + F2*F5 + F24*F27) + G[168]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[169]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[174]*(F19*F22 + F25*F28 + F3*F6) + G[175]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[180]*(F20*F23 + F26*F29 + F4*F7) + G[187]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[190]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[192]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F12*(F0*(G[10]*(F25 + F28) + G[11]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[57]*(F2 + F5) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[60]*(F3 + F6) + G[61]*(F4 + F7) + G[7]*(F24 + F27)) + F1*(G[10]*(F25 + F28) + G[119]*(F2 + F5) + G[11]*(F26 + F29) + G[120]*(F3 + F6) + G[121]*(F4 + F7) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[7]*(F24 + F27)) + F11*(G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7) + G[45]*(F24 + F27) + G[48]*(F25 + F28) + G[49]*(F26 + F29)) + F12*(G[12] + G[230]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[231]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[232]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[233]*(F18*F21 + F2*F5 + F24*F27) + G[234]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[235]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[236]*(F19*F22 + F25*F28 + F3*F6) + G[237]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[238]*(F20*F23 + F26*F29 + F4*F7) + G[57]*(F24 + F27) + G[60]*(F25 + F28) + G[61]*(F26 + F29)) + F14*(G[248]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[249]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[250]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[251]*(F18*F21 + F2*F5 + F24*F27) + G[252]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[253]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[254]*(F19*F22 + F25*F28 + F3*F6) + G[255]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[256]*(F20*F23 + F26*F29 + F4*F7) + G[69]*(F24 + F27) + G[72]*(F25 + F28) + G[73]*(F26 + F29)) + F15*(G[260] + G[170]*(F18 + F21) + G[176]*(F19 + F22) + G[181]*(F20 + F23) + G[257]*(F24 + F27) + G[258]*(F25 + F28) + G[259]*(F26 + F29) + G[78]*(F2 + F5) + G[87]*(F3 + F6) + G[96]*(F4 + F7)) + F16*(G[263] + G[171]*(F18 + F21) + G[177]*(F19 + F22) + G[182]*(F20 + F23) + G[258]*(F24 + F27) + G[261]*(F25 + F28) + G[262]*(F26 + F29) + G[79]*(F2 + F5) + G[88]*(F3 + F6) + G[97]*(F4 + F7)) + F17*(G[265] + G[172]*(F18 + F21) + G[178]*(F19 + F22) + G[183]*(F20 + F23) + G[259]*(F24 + F27) + G[262]*(F25 + F28) + G[264]*(F26 + F29) + G[80]*(F2 + F5) + G[89]*(F3 + F6) + G[98]*(F4 + F7)) + F8*(G[108]*(F24 + F27) + G[111]*(F25 + F28) + G[112]*(F26 + F29) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7))) + F13*(F0*(G[27]*(F24 + F27) + G[31]*(F25 + F28) + G[35]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[57]*(F2 + F5) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[60]*(F3 + F6) + G[61]*(F4 + F7)) + F1*(G[119]*(F2 + F5) + G[120]*(F3 + F6) + G[121]*(F4 + F7) + G[27]*(F24 + F27) + G[31]*(F25 + F28) + G[35]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F24 + F27) + G[117]*(F25 + F28) + G[118]*(F26 + F29) + G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7)) + F12*(G[22] + G[233]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[236]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[238]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[239]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[240]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[241]*(F18*F21 + F2*F5 + F24*F27) + G[242]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[243]*(F19*F22 + F25*F28 + F3*F6) + G[244]*(F20*F23 + F26*F29 + F4*F7) + G[245]*(F24 + F27) + G[246]*(F25 + F28) + G[247]*(F26 + F29)) + F13*(G[12] + G[119]*(F24 + F27) + G[120]*(F25 + F28) + G[121]*(F26 + F29) + G[230]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[231]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[232]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[233]*(F18*F21 + F2*F5 + F24*F27) + G[234]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[235]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[236]*(F19*F22 + F25*F28 + F3*F6) + G[237]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[238]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F24 + F27) + G[123]*(F25 + F28) + G[124]*(F26 + F29) + G[248]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[249]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[250]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[251]*(F18*F21 + F2*F5 + F24*F27) + G[252]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[253]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[254]*(F19*F22 + F25*F28 + F3*F6) + G[255]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[256]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[266] + G[170]*(F18 + F21) + G[176]*(F19 + F22) + G[181]*(F20 + F23) + G[257]*(F24 + F27) + G[258]*(F25 + F28) + G[259]*(F26 + F29) + G[78]*(F2 + F5) + G[87]*(F3 + F6) + G[96]*(F4 + F7)) + F16*(G[267] + G[171]*(F18 + F21) + G[177]*(F19 + F22) + G[182]*(F20 + F23) + G[258]*(F24 + F27) + G[261]*(F25 + F28) + G[262]*(F26 + F29) + G[79]*(F2 + F5) + G[88]*(F3 + F6) + G[97]*(F4 + F7)) + F17*(G[268] + G[172]*(F18 + F21) + G[178]*(F19 + F22) + G[183]*(F20 + F23) + G[259]*(F24 + F27) + G[262]*(F25 + F28) + G[264]*(F26 + F29) + G[80]*(F2 + F5) + G[89]*(F3 + F6) + G[98]*(F4 + F7)) + F8*(G[128]*(F24 + F27) + G[129]*(F25 + F28) + G[130]*(F26 + F29) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7))) + F14*(F11*(G[170]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[177]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[183]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[194]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[195]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[196]*(F18*F21 + F2*F5 + F24*F27) + G[197]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[198]*(F19*F22 + F25*F28 + F3*F6) + G[199]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[241]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[243]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[244]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[257]*(F18*F21 + F2*F5 + F24*F27) + G[258]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[259]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[261]*(F19*F22 + F25*F28 + F3*F6) + G[262]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[264]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[204]*(F18 + F21) + G[212]*(F19 + F22) + G[219]*(F20 + F23) + G[269]*(F2 + F5) + G[270]*(F24 + F27) + G[271]*(F25 + F28) + G[272]*(F26 + F29) + G[273]*(F3 + F6) + G[274]*(F4 + F7)) + F16*(G[205]*(F18 + F21) + G[213]*(F19 + F22) + G[220]*(F20 + F23) + G[271]*(F24 + F27) + G[275]*(F2 + F5) + G[276]*(F25 + F28) + G[277]*(F26 + F29) + G[278]*(F3 + F6) + G[279]*(F4 + F7)) + F17*(G[206]*(F18 + F21) + G[214]*(F19 + F22) + G[221]*(F20 + F23) + G[272]*(F24 + F27) + G[277]*(F25 + F28) + G[280]*(F2 + F5) + G[281]*(F26 + F29) + G[282]*(F3 + F6) + G[283]*(F4 + F7))) + F15*F15*G[290] + F16*(F15*G[291] + F16*G[297]) + F17*(F11*(G[203]*(F18 + F21) + G[211]*(F19 + F22) + G[217]*(F2 + F5) + G[218]*(F20 + F23) + G[219]*(F24 + F27) + G[220]*(F25 + F28) + G[221]*(F26 + F29) + G[222]*(F3 + F6) + G[223]*(F4 + F7)) + F15*G[292] + F16*G[298] + F17*G[302]) + F8*(F11*(G[224]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[225]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[226]*(F18*F21 + F2*F5 + F24*F27) + G[227]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[228]*(F19*F22 + F25*F28 + F3*F6) + G[229]*(F20*F23 + F26*F29 + F4*F7) + G[74]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[85]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[95]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F14*(G[284]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[285]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[286]*(F18*F21 + F2*F5 + F24*F27) + G[287]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[288]*(F19*F22 + F25*F28 + F3*F6) + G[289]*(F20*F23 + F26*F29 + F4*F7) + G[78]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[88]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[98]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F15*(G[202]*(F18 + F21) + G[210]*(F19 + F22) + G[217]*(F20 + F23) + G[269]*(F24 + F27) + G[275]*(F25 + F28) + G[280]*(F26 + F29) + G[293]*(F2 + F5) + G[294]*(F3 + F6) + G[295]*(F4 + F7)) + F16*(G[207]*(F18 + F21) + G[215]*(F19 + F22) + G[222]*(F20 + F23) + G[273]*(F24 + F27) + G[278]*(F25 + F28) + G[282]*(F26 + F29) + G[294]*(F2 + F5) + G[299]*(F3 + F6) + G[300]*(F4 + F7)) + F17*(G[208]*(F18 + F21) + G[216]*(F19 + F22) + G[223]*(F20 + F23) + G[274]*(F24 + F27) + G[279]*(F25 + F28) + G[283]*(F26 + F29) + G[295]*(F2 + F5) + G[300]*(F3 + F6) + G[303]*(F4 + F7)) + F8*(G[15]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[17]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[19]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[76]*(F18*F21 + F2*F5 + F24*F27) + G[81]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[82]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[90]*(F19*F22 + F25*F28 + F3*F6) + G[91]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[99]*(F20*F23 + F26*F29 + F4*F7))) + F9*(F0*(G[10]*(F19 + F22) + G[11]*(F20 + F23) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[32]*(F2 + F5) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[36]*(F3 + F6) + G[37]*(F4 + F7) + G[7]*(F18 + F21)) + F1*(G[10]*(F19 + F22) + G[113]*(F2 + F5) + G[114]*(F3 + F6) + G[115]*(F4 + F7) + G[11]*(F20 + F23) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[7]*(F18 + F21)) + F10*(G[22] + G[134]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[137]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[139]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[185]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[186]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[187]*(F18*F21 + F2*F5 + F24*F27) + G[188]*(F18 + F21) + G[189]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[190]*(F19*F22 + F25*F28 + F3*F6) + G[191]*(F19 + F22) + G[192]*(F20*F23 + F26*F29 + F4*F7) + G[193]*(F20 + F23)) + F11*(G[140]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[141]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[142]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[143]*(F18*F21 + F2*F5 + F24*F27) + G[144]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[145]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[146]*(F19*F22 + F25*F28 + F3*F6) + G[147]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[148]*(F20*F23 + F26*F29 + F4*F7) + G[45]*(F18 + F21) + G[48]*(F19 + F22) + G[49]*(F20 + F23)) + F12*(G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F24 + F27) + G[36]*(F25 + F28) + G[37]*(F26 + F29) + G[57]*(F18 + F21) + G[60]*(F19 + F22) + G[61]*(F20 + F23)) + F13*(G[113]*(F24 + F27) + G[114]*(F25 + F28) + G[115]*(F26 + F29) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[57]*(F18 + F21) + G[60]*(F19 + F22) + G[61]*(F20 + F23)) + F14*(G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7) + G[69]*(F18 + F21) + G[72]*(F19 + F22) + G[73]*(F20 + F23)) + F15*(G[296] + G[167]*(F18 + F21) + G[168]*(F19 + F22) + G[169]*(F20 + F23) + G[170]*(F24 + F27) + G[171]*(F25 + F28) + G[172]*(F26 + F29) + G[74]*(F2 + F5) + G[84]*(F3 + F6) + G[93]*(F4 + F7)) + F16*(G[301] + G[168]*(F18 + F21) + G[174]*(F19 + F22) + G[175]*(F20 + F23) + G[176]*(F24 + F27) + G[177]*(F25 + F28) + G[178]*(F26 + F29) + G[75]*(F2 + F5) + G[85]*(F3 + F6) + G[94]*(F4 + F7)) + F17*(G[304] + G[169]*(F18 + F21) + G[175]*(F19 + F22) + G[180]*(F20 + F23) + G[181]*(F24 + F27) + G[182]*(F25 + F28) + G[183]*(F26 + F29) + G[77]*(F2 + F5) + G[86]*(F3 + F6) + G[95]*(F4 + F7)) + F8*(G[108]*(F18 + F21) + G[111]*(F19 + F22) + G[112]*(F20 + F23) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7)) + F9*(G[12] + G[131]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[132]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[133]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[134]*(F18*F21 + F2*F5 + F24*F27) + G[135]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[136]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[137]*(F19*F22 + F25*F28 + F3*F6) + G[138]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[139]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F18 + F21) + G[36]*(F19 + F22) + G[37]*(F20 + F23))));
      
      
      // Number of operations for primary indices: 1
      // Number of operations to compute entry: 1
      A[0] += I[0];
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentumresidualglobal3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentumresidualglobal3d_cell_integral_1_0::nsemomentumresidualglobal3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_cell_integral_1_0::~nsemomentumresidualglobal3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentumresidualglobal3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Value of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[4][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    A[0] = 0.0;
    // Number of operations to compute geometry constants: 1186.
    double G[305];
    G[0] = 0.0625*K_00*K_00*det*w[2][0];
    G[1] = 0.125*K_00*K_10*det*w[2][0];
    G[2] = 0.125*K_00*K_20*det*w[2][0];
    G[3] = 0.125*K_00*K_00*det*w[2][0];
    G[4] = 0.0625*K_10*K_10*det*w[2][0];
    G[5] = 0.125*K_10*K_20*det*w[2][0];
    G[6] = 0.125*K_10*K_10*det*w[2][0];
    G[7] = 0.5*K_00*det*w[2][0]/w[3][0];
    G[8] = 0.0625*K_20*K_20*det*w[2][0];
    G[9] = 0.125*K_20*K_20*det*w[2][0];
    G[10] = 0.5*K_10*det*w[2][0]/w[3][0];
    G[11] = 0.5*K_20*det*w[2][0]/w[3][0];
    G[12] = det*w[2][0]/(w[3][0]*w[3][0]);
    G[13] = 0.25*K_00*K_10*det*w[2][0];
    G[14] = 0.25*K_00*K_20*det*w[2][0];
    G[15] = 0.25*K_00*K_00*det*w[2][0];
    G[16] = 0.25*K_10*K_20*det*w[2][0];
    G[17] = 0.25*K_10*K_10*det*w[2][0];
    G[18] = 0.0;
    G[19] = 0.25*K_20*K_20*det*w[2][0];
    G[20] = 0.0;
    G[21] = 0.0;
    G[22] = -2.0*det*w[2][0]/(w[3][0]*w[3][0]);
    G[23] = 0.125*K_00*K_01*det*w[2][0];
    G[24] = 0.125*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[25] = 0.125*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[26] = 0.25*K_00*K_01*det*w[2][0];
    G[27] = -0.5*K_00*det*w[2][0]/w[3][0];
    G[28] = 0.125*K_10*K_11*det*w[2][0];
    G[29] = 0.125*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[30] = 0.25*K_10*K_11*det*w[2][0];
    G[31] = -0.5*K_10*det*w[2][0]/w[3][0];
    G[32] = 0.5*K_01*det*w[2][0]/w[3][0];
    G[33] = 0.125*K_20*K_21*det*w[2][0];
    G[34] = 0.25*K_20*K_21*det*w[2][0];
    G[35] = -0.5*K_20*det*w[2][0]/w[3][0];
    G[36] = 0.5*K_11*det*w[2][0]/w[3][0];
    G[37] = 0.5*K_21*det*w[2][0]/w[3][0];
    G[38] = -0.25*K_00*K_01*det*w[2][0];
    G[39] = -0.25*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[40] = -0.25*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[41] = -0.5*K_00*K_01*det*w[2][0];
    G[42] = -0.25*K_10*K_11*det*w[2][0];
    G[43] = -0.25*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[44] = -0.5*K_10*K_11*det*w[2][0];
    G[45] =  - K_01*det*w[2][0]/w[3][0];
    G[46] = -0.25*K_20*K_21*det*w[2][0];
    G[47] = -0.5*K_20*K_21*det*w[2][0];
    G[48] =  - K_11*det*w[2][0]/w[3][0];
    G[49] =  - K_21*det*w[2][0]/w[3][0];
    G[50] = 0.125*K_00*K_02*det*w[2][0];
    G[51] = 0.125*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[52] = 0.125*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[53] = 0.25*K_00*K_02*det*w[2][0];
    G[54] = 0.125*K_10*K_12*det*w[2][0];
    G[55] = 0.125*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[56] = 0.25*K_10*K_12*det*w[2][0];
    G[57] = 0.5*K_02*det*w[2][0]/w[3][0];
    G[58] = 0.125*K_20*K_22*det*w[2][0];
    G[59] = 0.25*K_20*K_22*det*w[2][0];
    G[60] = 0.5*K_12*det*w[2][0]/w[3][0];
    G[61] = 0.5*K_22*det*w[2][0]/w[3][0];
    G[62] = -0.25*K_00*K_02*det*w[2][0];
    G[63] = -0.25*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[64] = -0.25*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[65] = -0.5*K_00*K_02*det*w[2][0];
    G[66] = -0.25*K_10*K_12*det*w[2][0];
    G[67] = -0.25*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[68] = -0.5*K_10*K_12*det*w[2][0];
    G[69] =  - K_02*det*w[2][0]/w[3][0];
    G[70] = -0.25*K_20*K_22*det*w[2][0];
    G[71] = -0.5*K_20*K_22*det*w[2][0];
    G[72] =  - K_12*det*w[2][0]/w[3][0];
    G[73] =  - K_22*det*w[2][0]/w[3][0];
    G[74] = 0.5*K_00*K_01*det*w[2][0];
    G[75] = 0.5*K_01*K_10*det*w[2][0];
    G[76] = 0.5*K_00*K_00*det*w[2][0];
    G[77] = 0.5*K_01*K_20*det*w[2][0];
    G[78] = 0.5*K_00*K_02*det*w[2][0];
    G[79] = 0.5*K_02*K_10*det*w[2][0];
    G[80] = 0.5*K_02*K_20*det*w[2][0];
    G[81] = 0.5*K_00*K_10*det*w[2][0];
    G[82] = 0.5*K_00*K_20*det*w[2][0];
    G[83] = 2.0*K_00*det*w[2][0]/w[3][0];
    G[84] = 0.5*K_00*K_11*det*w[2][0];
    G[85] = 0.5*K_10*K_11*det*w[2][0];
    G[86] = 0.5*K_11*K_20*det*w[2][0];
    G[87] = 0.5*K_00*K_12*det*w[2][0];
    G[88] = 0.5*K_10*K_12*det*w[2][0];
    G[89] = 0.5*K_12*K_20*det*w[2][0];
    G[90] = 0.5*K_10*K_10*det*w[2][0];
    G[91] = 0.5*K_10*K_20*det*w[2][0];
    G[92] = 2.0*K_10*det*w[2][0]/w[3][0];
    G[93] = 0.5*K_00*K_21*det*w[2][0];
    G[94] = 0.5*K_10*K_21*det*w[2][0];
    G[95] = 0.5*K_20*K_21*det*w[2][0];
    G[96] = 0.5*K_00*K_22*det*w[2][0];
    G[97] = 0.5*K_10*K_22*det*w[2][0];
    G[98] = 0.5*K_20*K_22*det*w[2][0];
    G[99] = 0.5*K_20*K_20*det*w[2][0];
    G[100] = 2.0*K_20*det*w[2][0]/w[3][0];
    G[101] = -0.25*K_00*K_00*det*w[2][0];
    G[102] = -0.5*K_00*K_10*det*w[2][0];
    G[103] = -0.5*K_00*K_20*det*w[2][0];
    G[104] = -0.5*K_00*K_00*det*w[2][0];
    G[105] = -0.25*K_10*K_10*det*w[2][0];
    G[106] = -0.5*K_10*K_20*det*w[2][0];
    G[107] = -0.5*K_10*K_10*det*w[2][0];
    G[108] =  - K_00*det*w[2][0]/w[3][0];
    G[109] = -0.25*K_20*K_20*det*w[2][0];
    G[110] = -0.5*K_20*K_20*det*w[2][0];
    G[111] =  - K_10*det*w[2][0]/w[3][0];
    G[112] =  - K_20*det*w[2][0]/w[3][0];
    G[113] = -0.5*K_01*det*w[2][0]/w[3][0];
    G[114] = -0.5*K_11*det*w[2][0]/w[3][0];
    G[115] = -0.5*K_21*det*w[2][0]/w[3][0];
    G[116] = K_01*det*w[2][0]/w[3][0];
    G[117] = K_11*det*w[2][0]/w[3][0];
    G[118] = K_21*det*w[2][0]/w[3][0];
    G[119] = -0.5*K_02*det*w[2][0]/w[3][0];
    G[120] = -0.5*K_12*det*w[2][0]/w[3][0];
    G[121] = -0.5*K_22*det*w[2][0]/w[3][0];
    G[122] = K_02*det*w[2][0]/w[3][0];
    G[123] = K_12*det*w[2][0]/w[3][0];
    G[124] = K_22*det*w[2][0]/w[3][0];
    G[125] = -2.0*K_00*det*w[2][0]/w[3][0];
    G[126] = -2.0*K_10*det*w[2][0]/w[3][0];
    G[127] = -2.0*K_20*det*w[2][0]/w[3][0];
    G[128] = K_00*det*w[2][0]/w[3][0];
    G[129] = K_10*det*w[2][0]/w[3][0];
    G[130] = K_20*det*w[2][0]/w[3][0];
    G[131] = 0.0625*K_01*K_01*det*w[2][0];
    G[132] = 0.125*K_01*K_11*det*w[2][0];
    G[133] = 0.125*K_01*K_21*det*w[2][0];
    G[134] = 0.125*K_01*K_01*det*w[2][0];
    G[135] = 0.0625*K_11*K_11*det*w[2][0];
    G[136] = 0.125*K_11*K_21*det*w[2][0];
    G[137] = 0.125*K_11*K_11*det*w[2][0];
    G[138] = 0.0625*K_21*K_21*det*w[2][0];
    G[139] = 0.125*K_21*K_21*det*w[2][0];
    G[140] = -0.25*K_01*K_01*det*w[2][0];
    G[141] = -0.5*K_01*K_11*det*w[2][0];
    G[142] = -0.5*K_01*K_21*det*w[2][0];
    G[143] = -0.5*K_01*K_01*det*w[2][0];
    G[144] = -0.25*K_11*K_11*det*w[2][0];
    G[145] = -0.5*K_11*K_21*det*w[2][0];
    G[146] = -0.5*K_11*K_11*det*w[2][0];
    G[147] = -0.25*K_21*K_21*det*w[2][0];
    G[148] = -0.5*K_21*K_21*det*w[2][0];
    G[149] = 0.125*K_01*K_02*det*w[2][0];
    G[150] = 0.125*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[151] = 0.125*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[152] = 0.25*K_01*K_02*det*w[2][0];
    G[153] = 0.125*K_11*K_12*det*w[2][0];
    G[154] = 0.125*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[155] = 0.25*K_11*K_12*det*w[2][0];
    G[156] = 0.125*K_21*K_22*det*w[2][0];
    G[157] = 0.25*K_21*K_22*det*w[2][0];
    G[158] = -0.25*K_01*K_02*det*w[2][0];
    G[159] = -0.25*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[160] = -0.25*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[161] = -0.5*K_01*K_02*det*w[2][0];
    G[162] = -0.25*K_11*K_12*det*w[2][0];
    G[163] = -0.25*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[164] = -0.5*K_11*K_12*det*w[2][0];
    G[165] = -0.25*K_21*K_22*det*w[2][0];
    G[166] = -0.5*K_21*K_22*det*w[2][0];
    G[167] = 0.5*K_01*K_01*det*w[2][0];
    G[168] = 0.5*K_01*K_11*det*w[2][0];
    G[169] = 0.5*K_01*K_21*det*w[2][0];
    G[170] = 0.5*K_01*K_02*det*w[2][0];
    G[171] = 0.5*K_02*K_11*det*w[2][0];
    G[172] = 0.5*K_02*K_21*det*w[2][0];
    G[173] = -2.0*K_01*det*w[2][0]/w[3][0];
    G[174] = 0.5*K_11*K_11*det*w[2][0];
    G[175] = 0.5*K_11*K_21*det*w[2][0];
    G[176] = 0.5*K_01*K_12*det*w[2][0];
    G[177] = 0.5*K_11*K_12*det*w[2][0];
    G[178] = 0.5*K_12*K_21*det*w[2][0];
    G[179] = -2.0*K_11*det*w[2][0]/w[3][0];
    G[180] = 0.5*K_21*K_21*det*w[2][0];
    G[181] = 0.5*K_01*K_22*det*w[2][0];
    G[182] = 0.5*K_11*K_22*det*w[2][0];
    G[183] = 0.5*K_21*K_22*det*w[2][0];
    G[184] = -2.0*K_21*det*w[2][0]/w[3][0];
    G[185] = 0.25*K_01*K_11*det*w[2][0];
    G[186] = 0.25*K_01*K_21*det*w[2][0];
    G[187] = 0.25*K_01*K_01*det*w[2][0];
    G[188] = 0.0;
    G[189] = 0.25*K_11*K_21*det*w[2][0];
    G[190] = 0.25*K_11*K_11*det*w[2][0];
    G[191] = 0.0;
    G[192] = 0.25*K_21*K_21*det*w[2][0];
    G[193] = 0.0;
    G[194] = 0.5*det*w[2][0]*(K_01*K_12 + K_02*K_11);
    G[195] = 0.5*det*w[2][0]*(K_01*K_22 + K_02*K_21);
    G[196] = K_01*K_02*det*w[2][0];
    G[197] = 0.5*det*w[2][0]*(K_11*K_22 + K_12*K_21);
    G[198] = K_11*K_12*det*w[2][0];
    G[199] = K_21*K_22*det*w[2][0];
    G[200] =  - K_01*K_01*det*w[2][0];
    G[201] =  - K_01*K_11*det*w[2][0];
    G[202] =  - K_00*K_01*det*w[2][0];
    G[203] =  - K_01*K_21*det*w[2][0];
    G[204] =  - K_01*K_02*det*w[2][0];
    G[205] =  - K_02*K_11*det*w[2][0];
    G[206] =  - K_02*K_21*det*w[2][0];
    G[207] =  - K_00*K_11*det*w[2][0];
    G[208] =  - K_00*K_21*det*w[2][0];
    G[209] =  - K_11*K_11*det*w[2][0];
    G[210] =  - K_01*K_10*det*w[2][0];
    G[211] =  - K_11*K_21*det*w[2][0];
    G[212] =  - K_01*K_12*det*w[2][0];
    G[213] =  - K_11*K_12*det*w[2][0];
    G[214] =  - K_12*K_21*det*w[2][0];
    G[215] =  - K_10*K_11*det*w[2][0];
    G[216] =  - K_10*K_21*det*w[2][0];
    G[217] =  - K_01*K_20*det*w[2][0];
    G[218] =  - K_21*K_21*det*w[2][0];
    G[219] =  - K_01*K_22*det*w[2][0];
    G[220] =  - K_11*K_22*det*w[2][0];
    G[221] =  - K_21*K_22*det*w[2][0];
    G[222] =  - K_11*K_20*det*w[2][0];
    G[223] =  - K_20*K_21*det*w[2][0];
    G[224] = 0.5*det*w[2][0]*(K_00*K_11 + K_01*K_10);
    G[225] = 0.5*det*w[2][0]*(K_00*K_21 + K_01*K_20);
    G[226] = K_00*K_01*det*w[2][0];
    G[227] = 0.5*det*w[2][0]*(K_10*K_21 + K_11*K_20);
    G[228] = K_10*K_11*det*w[2][0];
    G[229] = K_20*K_21*det*w[2][0];
    G[230] = 0.0625*K_02*K_02*det*w[2][0];
    G[231] = 0.125*K_02*K_12*det*w[2][0];
    G[232] = 0.125*K_02*K_22*det*w[2][0];
    G[233] = 0.125*K_02*K_02*det*w[2][0];
    G[234] = 0.0625*K_12*K_12*det*w[2][0];
    G[235] = 0.125*K_12*K_22*det*w[2][0];
    G[236] = 0.125*K_12*K_12*det*w[2][0];
    G[237] = 0.0625*K_22*K_22*det*w[2][0];
    G[238] = 0.125*K_22*K_22*det*w[2][0];
    G[239] = 0.25*K_02*K_12*det*w[2][0];
    G[240] = 0.25*K_02*K_22*det*w[2][0];
    G[241] = 0.25*K_02*K_02*det*w[2][0];
    G[242] = 0.25*K_12*K_22*det*w[2][0];
    G[243] = 0.25*K_12*K_12*det*w[2][0];
    G[244] = 0.25*K_22*K_22*det*w[2][0];
    G[245] = 0.0;
    G[246] = 0.0;
    G[247] = 0.0;
    G[248] = -0.25*K_02*K_02*det*w[2][0];
    G[249] = -0.5*K_02*K_12*det*w[2][0];
    G[250] = -0.5*K_02*K_22*det*w[2][0];
    G[251] = -0.5*K_02*K_02*det*w[2][0];
    G[252] = -0.25*K_12*K_12*det*w[2][0];
    G[253] = -0.5*K_12*K_22*det*w[2][0];
    G[254] = -0.5*K_12*K_12*det*w[2][0];
    G[255] = -0.25*K_22*K_22*det*w[2][0];
    G[256] = -0.5*K_22*K_22*det*w[2][0];
    G[257] = 0.5*K_02*K_02*det*w[2][0];
    G[258] = 0.5*K_02*K_12*det*w[2][0];
    G[259] = 0.5*K_02*K_22*det*w[2][0];
    G[260] = 2.0*K_02*det*w[2][0]/w[3][0];
    G[261] = 0.5*K_12*K_12*det*w[2][0];
    G[262] = 0.5*K_12*K_22*det*w[2][0];
    G[263] = 2.0*K_12*det*w[2][0]/w[3][0];
    G[264] = 0.5*K_22*K_22*det*w[2][0];
    G[265] = 2.0*K_22*det*w[2][0]/w[3][0];
    G[266] = -2.0*K_02*det*w[2][0]/w[3][0];
    G[267] = -2.0*K_12*det*w[2][0]/w[3][0];
    G[268] = -2.0*K_22*det*w[2][0]/w[3][0];
    G[269] =  - K_00*K_02*det*w[2][0];
    G[270] =  - K_02*K_02*det*w[2][0];
    G[271] =  - K_02*K_12*det*w[2][0];
    G[272] =  - K_02*K_22*det*w[2][0];
    G[273] =  - K_00*K_12*det*w[2][0];
    G[274] =  - K_00*K_22*det*w[2][0];
    G[275] =  - K_02*K_10*det*w[2][0];
    G[276] =  - K_12*K_12*det*w[2][0];
    G[277] =  - K_12*K_22*det*w[2][0];
    G[278] =  - K_10*K_12*det*w[2][0];
    G[279] =  - K_10*K_22*det*w[2][0];
    G[280] =  - K_02*K_20*det*w[2][0];
    G[281] =  - K_22*K_22*det*w[2][0];
    G[282] =  - K_12*K_20*det*w[2][0];
    G[283] =  - K_20*K_22*det*w[2][0];
    G[284] = 0.5*det*w[2][0]*(K_00*K_12 + K_02*K_10);
    G[285] = 0.5*det*w[2][0]*(K_00*K_22 + K_02*K_20);
    G[286] = K_00*K_02*det*w[2][0];
    G[287] = 0.5*det*w[2][0]*(K_10*K_22 + K_12*K_20);
    G[288] = K_10*K_12*det*w[2][0];
    G[289] = K_20*K_22*det*w[2][0];
    G[290] = det*w[2][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[291] = 2.0*det*w[2][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[292] = 2.0*det*w[2][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[293] =  - K_00*K_00*det*w[2][0];
    G[294] =  - K_00*K_10*det*w[2][0];
    G[295] =  - K_00*K_20*det*w[2][0];
    G[296] = 2.0*K_01*det*w[2][0]/w[3][0];
    G[297] = det*w[2][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[298] = 2.0*det*w[2][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[299] =  - K_10*K_10*det*w[2][0];
    G[300] =  - K_10*K_20*det*w[2][0];
    G[301] = 2.0*K_11*det*w[2][0]/w[3][0];
    G[302] = det*w[2][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[303] =  - K_20*K_20*det*w[2][0];
    G[304] = 2.0*K_21*det*w[2][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 26936
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      
      // Total number of operations to compute function values = 84
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F3 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F4 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F5 += FE0_D001[ip][r]*w[4][nzc6[r]];
        F6 += FE0_D001[ip][r]*w[4][nzc5[r]];
        F7 += FE0_D001[ip][r]*w[4][nzc4[r]];
        F15 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F16 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F17 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F18 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F19 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F21 += FE0_D001[ip][r]*w[4][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[4][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[4][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F25 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F26 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F27 += FE0_D001[ip][r]*w[4][nzc14[r]];
        F28 += FE0_D001[ip][r]*w[4][nzc13[r]];
        F29 += FE0_D001[ip][r]*w[4][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 72
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc3[r]];
        F1 += FE0[ip][r]*w[4][nzc3[r]];
        F8 += FE0[ip][r]*w[5][nzc3[r]];
        F9 += FE0[ip][r]*w[0][nzc7[r]];
        F10 += FE0[ip][r]*w[4][nzc7[r]];
        F11 += FE0[ip][r]*w[5][nzc7[r]];
        F12 += FE0[ip][r]*w[0][nzc11[r]];
        F13 += FE0[ip][r]*w[4][nzc11[r]];
        F14 += FE0[ip][r]*w[5][nzc11[r]];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 6577
      double I[1];
      // Number of operations: 6577
      I[0] = W4[ip]*(F0*(F0*(G[12] + G[0]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[10]*(F3 + F6) + G[11]*(F4 + F7) + G[1]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[2]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[3]*(F18*F21 + F2*F5 + F24*F27) + G[4]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[5]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[6]*(F19*F22 + F25*F28 + F3*F6) + G[7]*(F2 + F5) + G[8]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[9]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[45]*(F2 + F5) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7) + G[48]*(F3 + F6) + G[49]*(F4 + F7)) + F14*(G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[69]*(F2 + F5) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7) + G[72]*(F3 + F6) + G[73]*(F4 + F7)) + F15*(G[83] + G[74]*(F18 + F21) + G[75]*(F19 + F22) + G[76]*(F2 + F5) + G[77]*(F20 + F23) + G[78]*(F24 + F27) + G[79]*(F25 + F28) + G[80]*(F26 + F29) + G[81]*(F3 + F6) + G[82]*(F4 + F7)) + F16*(G[92] + G[81]*(F2 + F5) + G[84]*(F18 + F21) + G[85]*(F19 + F22) + G[86]*(F20 + F23) + G[87]*(F24 + F27) + G[88]*(F25 + F28) + G[89]*(F26 + F29) + G[90]*(F3 + F6) + G[91]*(F4 + F7)) + F17*(G[100] + G[82]*(F2 + F5) + G[91]*(F3 + F6) + G[93]*(F18 + F21) + G[94]*(F19 + F22) + G[95]*(F20 + F23) + G[96]*(F24 + F27) + G[97]*(F25 + F28) + G[98]*(F26 + F29) + G[99]*(F4 + F7)) + F8*(G[101]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[102]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[103]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[104]*(F18*F21 + F2*F5 + F24*F27) + G[105]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[106]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[107]*(F19*F22 + F25*F28 + F3*F6) + G[108]*(F2 + F5) + G[109]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[110]*(F20*F23 + F26*F29 + F4*F7) + G[111]*(F3 + F6) + G[112]*(F4 + F7))) + F1*(F0*(G[22] + G[13]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[14]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[15]*(F18*F21 + F2*F5 + F24*F27) + G[16]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[17]*(F19*F22 + F25*F28 + F3*F6) + G[18]*(F2 + F5) + G[19]*(F20*F23 + F26*F29 + F4*F7) + G[20]*(F3 + F6) + G[21]*(F4 + F7) + G[3]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[6]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[9]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F1*(G[12] + G[0]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[1]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[27]*(F2 + F5) + G[2]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[31]*(F3 + F6) + G[35]*(F4 + F7) + G[3]*(F18*F21 + F2*F5 + F24*F27) + G[4]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[5]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[6]*(F19*F22 + F25*F28 + F3*F6) + G[8]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[9]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F2 + F5) + G[117]*(F3 + F6) + G[118]*(F4 + F7) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F2 + F5) + G[123]*(F3 + F6) + G[124]*(F4 + F7) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[125] + G[74]*(F18 + F21) + G[75]*(F19 + F22) + G[76]*(F2 + F5) + G[77]*(F20 + F23) + G[78]*(F24 + F27) + G[79]*(F25 + F28) + G[80]*(F26 + F29) + G[81]*(F3 + F6) + G[82]*(F4 + F7)) + F16*(G[126] + G[81]*(F2 + F5) + G[84]*(F18 + F21) + G[85]*(F19 + F22) + G[86]*(F20 + F23) + G[87]*(F24 + F27) + G[88]*(F25 + F28) + G[89]*(F26 + F29) + G[90]*(F3 + F6) + G[91]*(F4 + F7)) + F17*(G[127] + G[82]*(F2 + F5) + G[91]*(F3 + F6) + G[93]*(F18 + F21) + G[94]*(F19 + F22) + G[95]*(F20 + F23) + G[96]*(F24 + F27) + G[97]*(F25 + F28) + G[98]*(F26 + F29) + G[99]*(F4 + F7)) + F8*(G[101]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[102]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[103]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[104]*(F18*F21 + F2*F5 + F24*F27) + G[105]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[106]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[107]*(F19*F22 + F25*F28 + F3*F6) + G[109]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[110]*(F20*F23 + F26*F29 + F4*F7) + G[128]*(F2 + F5) + G[129]*(F3 + F6) + G[130]*(F4 + F7))) + F10*(F0*(G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[27]*(F18 + F21) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[31]*(F19 + F22) + G[32]*(F2 + F5) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[35]*(F20 + F23) + G[36]*(F3 + F6) + G[37]*(F4 + F7)) + F1*(G[113]*(F2 + F5) + G[114]*(F3 + F6) + G[115]*(F4 + F7) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[27]*(F18 + F21) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[31]*(F19 + F22) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[35]*(F20 + F23)) + F10*(G[12] + G[113]*(F18 + F21) + G[114]*(F19 + F22) + G[115]*(F20 + F23) + G[131]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[132]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[133]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[134]*(F18*F21 + F2*F5 + F24*F27) + G[135]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[136]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[137]*(F19*F22 + F25*F28 + F3*F6) + G[138]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[139]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F18 + F21) + G[117]*(F19 + F22) + G[118]*(F20 + F23) + G[140]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[141]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[142]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[143]*(F18*F21 + F2*F5 + F24*F27) + G[144]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[145]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[146]*(F19*F22 + F25*F28 + F3*F6) + G[147]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[148]*(F20*F23 + F26*F29 + F4*F7)) + F12*(G[119]*(F18 + F21) + G[120]*(F19 + F22) + G[121]*(F20 + F23) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F24 + F27) + G[36]*(F25 + F28) + G[37]*(F26 + F29)) + F13*(G[113]*(F24 + F27) + G[114]*(F25 + F28) + G[115]*(F26 + F29) + G[119]*(F18 + F21) + G[120]*(F19 + F22) + G[121]*(F20 + F23) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F18 + F21) + G[123]*(F19 + F22) + G[124]*(F20 + F23) + G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[173] + G[167]*(F18 + F21) + G[168]*(F19 + F22) + G[169]*(F20 + F23) + G[170]*(F24 + F27) + G[171]*(F25 + F28) + G[172]*(F26 + F29) + G[74]*(F2 + F5) + G[84]*(F3 + F6) + G[93]*(F4 + F7)) + F16*(G[179] + G[168]*(F18 + F21) + G[174]*(F19 + F22) + G[175]*(F20 + F23) + G[176]*(F24 + F27) + G[177]*(F25 + F28) + G[178]*(F26 + F29) + G[75]*(F2 + F5) + G[85]*(F3 + F6) + G[94]*(F4 + F7)) + F17*(G[184] + G[169]*(F18 + F21) + G[175]*(F19 + F22) + G[180]*(F20 + F23) + G[181]*(F24 + F27) + G[182]*(F25 + F28) + G[183]*(F26 + F29) + G[77]*(F2 + F5) + G[86]*(F3 + F6) + G[95]*(F4 + F7)) + F8*(G[128]*(F18 + F21) + G[129]*(F19 + F22) + G[130]*(F20 + F23) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7))) + F11*(F15*(G[200]*(F18 + F21) + G[201]*(F19 + F22) + G[202]*(F2 + F5) + G[203]*(F20 + F23) + G[204]*(F24 + F27) + G[205]*(F25 + F28) + G[206]*(F26 + F29) + G[207]*(F3 + F6) + G[208]*(F4 + F7)) + F16*(G[201]*(F18 + F21) + G[209]*(F19 + F22) + G[210]*(F2 + F5) + G[211]*(F20 + F23) + G[212]*(F24 + F27) + G[213]*(F25 + F28) + G[214]*(F26 + F29) + G[215]*(F3 + F6) + G[216]*(F4 + F7))) + F11*F11*(G[167]*(F18*F21 + F2*F5 + F24*F27) + G[168]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[169]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[174]*(F19*F22 + F25*F28 + F3*F6) + G[175]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[180]*(F20*F23 + F26*F29 + F4*F7) + G[187]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[190]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[192]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F12*(F0*(G[10]*(F25 + F28) + G[11]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[57]*(F2 + F5) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[60]*(F3 + F6) + G[61]*(F4 + F7) + G[7]*(F24 + F27)) + F1*(G[10]*(F25 + F28) + G[119]*(F2 + F5) + G[11]*(F26 + F29) + G[120]*(F3 + F6) + G[121]*(F4 + F7) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[7]*(F24 + F27)) + F11*(G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7) + G[45]*(F24 + F27) + G[48]*(F25 + F28) + G[49]*(F26 + F29)) + F12*(G[12] + G[230]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[231]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[232]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[233]*(F18*F21 + F2*F5 + F24*F27) + G[234]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[235]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[236]*(F19*F22 + F25*F28 + F3*F6) + G[237]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[238]*(F20*F23 + F26*F29 + F4*F7) + G[57]*(F24 + F27) + G[60]*(F25 + F28) + G[61]*(F26 + F29)) + F14*(G[248]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[249]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[250]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[251]*(F18*F21 + F2*F5 + F24*F27) + G[252]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[253]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[254]*(F19*F22 + F25*F28 + F3*F6) + G[255]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[256]*(F20*F23 + F26*F29 + F4*F7) + G[69]*(F24 + F27) + G[72]*(F25 + F28) + G[73]*(F26 + F29)) + F15*(G[260] + G[170]*(F18 + F21) + G[176]*(F19 + F22) + G[181]*(F20 + F23) + G[257]*(F24 + F27) + G[258]*(F25 + F28) + G[259]*(F26 + F29) + G[78]*(F2 + F5) + G[87]*(F3 + F6) + G[96]*(F4 + F7)) + F16*(G[263] + G[171]*(F18 + F21) + G[177]*(F19 + F22) + G[182]*(F20 + F23) + G[258]*(F24 + F27) + G[261]*(F25 + F28) + G[262]*(F26 + F29) + G[79]*(F2 + F5) + G[88]*(F3 + F6) + G[97]*(F4 + F7)) + F17*(G[265] + G[172]*(F18 + F21) + G[178]*(F19 + F22) + G[183]*(F20 + F23) + G[259]*(F24 + F27) + G[262]*(F25 + F28) + G[264]*(F26 + F29) + G[80]*(F2 + F5) + G[89]*(F3 + F6) + G[98]*(F4 + F7)) + F8*(G[108]*(F24 + F27) + G[111]*(F25 + F28) + G[112]*(F26 + F29) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7))) + F13*(F0*(G[27]*(F24 + F27) + G[31]*(F25 + F28) + G[35]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[57]*(F2 + F5) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7) + G[60]*(F3 + F6) + G[61]*(F4 + F7)) + F1*(G[119]*(F2 + F5) + G[120]*(F3 + F6) + G[121]*(F4 + F7) + G[27]*(F24 + F27) + G[31]*(F25 + F28) + G[35]*(F26 + F29) + G[50]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[51]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[52]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[53]*(F18*F21 + F2*F5 + F24*F27) + G[54]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[55]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[56]*(F19*F22 + F25*F28 + F3*F6) + G[58]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[59]*(F20*F23 + F26*F29 + F4*F7)) + F11*(G[116]*(F24 + F27) + G[117]*(F25 + F28) + G[118]*(F26 + F29) + G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7)) + F12*(G[22] + G[233]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[236]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[238]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[239]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[240]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[241]*(F18*F21 + F2*F5 + F24*F27) + G[242]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[243]*(F19*F22 + F25*F28 + F3*F6) + G[244]*(F20*F23 + F26*F29 + F4*F7) + G[245]*(F24 + F27) + G[246]*(F25 + F28) + G[247]*(F26 + F29)) + F13*(G[12] + G[119]*(F24 + F27) + G[120]*(F25 + F28) + G[121]*(F26 + F29) + G[230]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[231]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[232]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[233]*(F18*F21 + F2*F5 + F24*F27) + G[234]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[235]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[236]*(F19*F22 + F25*F28 + F3*F6) + G[237]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[238]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[122]*(F24 + F27) + G[123]*(F25 + F28) + G[124]*(F26 + F29) + G[248]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[249]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[250]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[251]*(F18*F21 + F2*F5 + F24*F27) + G[252]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[253]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[254]*(F19*F22 + F25*F28 + F3*F6) + G[255]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[256]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[266] + G[170]*(F18 + F21) + G[176]*(F19 + F22) + G[181]*(F20 + F23) + G[257]*(F24 + F27) + G[258]*(F25 + F28) + G[259]*(F26 + F29) + G[78]*(F2 + F5) + G[87]*(F3 + F6) + G[96]*(F4 + F7)) + F16*(G[267] + G[171]*(F18 + F21) + G[177]*(F19 + F22) + G[182]*(F20 + F23) + G[258]*(F24 + F27) + G[261]*(F25 + F28) + G[262]*(F26 + F29) + G[79]*(F2 + F5) + G[88]*(F3 + F6) + G[97]*(F4 + F7)) + F17*(G[268] + G[172]*(F18 + F21) + G[178]*(F19 + F22) + G[183]*(F20 + F23) + G[259]*(F24 + F27) + G[262]*(F25 + F28) + G[264]*(F26 + F29) + G[80]*(F2 + F5) + G[89]*(F3 + F6) + G[98]*(F4 + F7)) + F8*(G[128]*(F24 + F27) + G[129]*(F25 + F28) + G[130]*(F26 + F29) + G[62]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[63]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[64]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[65]*(F18*F21 + F2*F5 + F24*F27) + G[66]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[67]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[68]*(F19*F22 + F25*F28 + F3*F6) + G[70]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[71]*(F20*F23 + F26*F29 + F4*F7))) + F14*(F11*(G[170]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[177]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[183]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[194]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[195]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[196]*(F18*F21 + F2*F5 + F24*F27) + G[197]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[198]*(F19*F22 + F25*F28 + F3*F6) + G[199]*(F20*F23 + F26*F29 + F4*F7)) + F14*(G[241]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[243]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[244]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[257]*(F18*F21 + F2*F5 + F24*F27) + G[258]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[259]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[261]*(F19*F22 + F25*F28 + F3*F6) + G[262]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[264]*(F20*F23 + F26*F29 + F4*F7)) + F15*(G[204]*(F18 + F21) + G[212]*(F19 + F22) + G[219]*(F20 + F23) + G[269]*(F2 + F5) + G[270]*(F24 + F27) + G[271]*(F25 + F28) + G[272]*(F26 + F29) + G[273]*(F3 + F6) + G[274]*(F4 + F7)) + F16*(G[205]*(F18 + F21) + G[213]*(F19 + F22) + G[220]*(F20 + F23) + G[271]*(F24 + F27) + G[275]*(F2 + F5) + G[276]*(F25 + F28) + G[277]*(F26 + F29) + G[278]*(F3 + F6) + G[279]*(F4 + F7)) + F17*(G[206]*(F18 + F21) + G[214]*(F19 + F22) + G[221]*(F20 + F23) + G[272]*(F24 + F27) + G[277]*(F25 + F28) + G[280]*(F2 + F5) + G[281]*(F26 + F29) + G[282]*(F3 + F6) + G[283]*(F4 + F7))) + F15*F15*G[290] + F16*(F15*G[291] + F16*G[297]) + F17*(F11*(G[203]*(F18 + F21) + G[211]*(F19 + F22) + G[217]*(F2 + F5) + G[218]*(F20 + F23) + G[219]*(F24 + F27) + G[220]*(F25 + F28) + G[221]*(F26 + F29) + G[222]*(F3 + F6) + G[223]*(F4 + F7)) + F15*G[292] + F16*G[298] + F17*G[302]) + F8*(F11*(G[224]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[225]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[226]*(F18*F21 + F2*F5 + F24*F27) + G[227]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[228]*(F19*F22 + F25*F28 + F3*F6) + G[229]*(F20*F23 + F26*F29 + F4*F7) + G[74]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[85]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[95]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F14*(G[284]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[285]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[286]*(F18*F21 + F2*F5 + F24*F27) + G[287]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[288]*(F19*F22 + F25*F28 + F3*F6) + G[289]*(F20*F23 + F26*F29 + F4*F7) + G[78]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[88]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[98]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7)) + F15*(G[202]*(F18 + F21) + G[210]*(F19 + F22) + G[217]*(F20 + F23) + G[269]*(F24 + F27) + G[275]*(F25 + F28) + G[280]*(F26 + F29) + G[293]*(F2 + F5) + G[294]*(F3 + F6) + G[295]*(F4 + F7)) + F16*(G[207]*(F18 + F21) + G[215]*(F19 + F22) + G[222]*(F20 + F23) + G[273]*(F24 + F27) + G[278]*(F25 + F28) + G[282]*(F26 + F29) + G[294]*(F2 + F5) + G[299]*(F3 + F6) + G[300]*(F4 + F7)) + F17*(G[208]*(F18 + F21) + G[216]*(F19 + F22) + G[223]*(F20 + F23) + G[274]*(F24 + F27) + G[279]*(F25 + F28) + G[283]*(F26 + F29) + G[295]*(F2 + F5) + G[300]*(F3 + F6) + G[303]*(F4 + F7)) + F8*(G[15]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[17]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[19]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[76]*(F18*F21 + F2*F5 + F24*F27) + G[81]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[82]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[90]*(F19*F22 + F25*F28 + F3*F6) + G[91]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[99]*(F20*F23 + F26*F29 + F4*F7))) + F9*(F0*(G[10]*(F19 + F22) + G[11]*(F20 + F23) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[32]*(F2 + F5) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[36]*(F3 + F6) + G[37]*(F4 + F7) + G[7]*(F18 + F21)) + F1*(G[10]*(F19 + F22) + G[113]*(F2 + F5) + G[114]*(F3 + F6) + G[115]*(F4 + F7) + G[11]*(F20 + F23) + G[23]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[24]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[25]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[26]*(F18*F21 + F2*F5 + F24*F27) + G[28]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[29]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[30]*(F19*F22 + F25*F28 + F3*F6) + G[33]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[34]*(F20*F23 + F26*F29 + F4*F7) + G[7]*(F18 + F21)) + F10*(G[22] + G[134]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[137]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[139]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[185]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[186]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[187]*(F18*F21 + F2*F5 + F24*F27) + G[188]*(F18 + F21) + G[189]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[190]*(F19*F22 + F25*F28 + F3*F6) + G[191]*(F19 + F22) + G[192]*(F20*F23 + F26*F29 + F4*F7) + G[193]*(F20 + F23)) + F11*(G[140]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[141]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[142]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[143]*(F18*F21 + F2*F5 + F24*F27) + G[144]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[145]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[146]*(F19*F22 + F25*F28 + F3*F6) + G[147]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[148]*(F20*F23 + F26*F29 + F4*F7) + G[45]*(F18 + F21) + G[48]*(F19 + F22) + G[49]*(F20 + F23)) + F12*(G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F24 + F27) + G[36]*(F25 + F28) + G[37]*(F26 + F29) + G[57]*(F18 + F21) + G[60]*(F19 + F22) + G[61]*(F20 + F23)) + F13*(G[113]*(F24 + F27) + G[114]*(F25 + F28) + G[115]*(F26 + F29) + G[149]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[150]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[151]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[152]*(F18*F21 + F2*F5 + F24*F27) + G[153]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[154]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[155]*(F19*F22 + F25*F28 + F3*F6) + G[156]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[157]*(F20*F23 + F26*F29 + F4*F7) + G[57]*(F18 + F21) + G[60]*(F19 + F22) + G[61]*(F20 + F23)) + F14*(G[158]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[159]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[160]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[161]*(F18*F21 + F2*F5 + F24*F27) + G[162]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[163]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[164]*(F19*F22 + F25*F28 + F3*F6) + G[165]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[166]*(F20*F23 + F26*F29 + F4*F7) + G[69]*(F18 + F21) + G[72]*(F19 + F22) + G[73]*(F20 + F23)) + F15*(G[296] + G[167]*(F18 + F21) + G[168]*(F19 + F22) + G[169]*(F20 + F23) + G[170]*(F24 + F27) + G[171]*(F25 + F28) + G[172]*(F26 + F29) + G[74]*(F2 + F5) + G[84]*(F3 + F6) + G[93]*(F4 + F7)) + F16*(G[301] + G[168]*(F18 + F21) + G[174]*(F19 + F22) + G[175]*(F20 + F23) + G[176]*(F24 + F27) + G[177]*(F25 + F28) + G[178]*(F26 + F29) + G[75]*(F2 + F5) + G[85]*(F3 + F6) + G[94]*(F4 + F7)) + F17*(G[304] + G[169]*(F18 + F21) + G[175]*(F19 + F22) + G[180]*(F20 + F23) + G[181]*(F24 + F27) + G[182]*(F25 + F28) + G[183]*(F26 + F29) + G[77]*(F2 + F5) + G[86]*(F3 + F6) + G[95]*(F4 + F7)) + F8*(G[108]*(F18 + F21) + G[111]*(F19 + F22) + G[112]*(F20 + F23) + G[38]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[39]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[40]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[41]*(F18*F21 + F2*F5 + F24*F27) + G[42]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[43]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[44]*(F19*F22 + F25*F28 + F3*F6) + G[46]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[47]*(F20*F23 + F26*F29 + F4*F7)) + F9*(G[12] + G[131]*(F18*F18 + F2*F2 + F21*F21 + F24*F24 + F27*F27 + F5*F5) + G[132]*(F19*(F18 + F21) + F22*(F18 + F21) + F25*(F24 + F27) + F28*(F24 + F27) + F3*(F2 + F5) + F6*(F2 + F5)) + G[133]*(F20*(F18 + F21) + F23*(F18 + F21) + F26*(F24 + F27) + F29*(F24 + F27) + F4*(F2 + F5) + F7*(F2 + F5)) + G[134]*(F18*F21 + F2*F5 + F24*F27) + G[135]*(F19*F19 + F22*F22 + F25*F25 + F28*F28 + F3*F3 + F6*F6) + G[136]*(F20*(F19 + F22) + F23*(F19 + F22) + F26*(F25 + F28) + F29*(F25 + F28) + F4*(F3 + F6) + F7*(F3 + F6)) + G[137]*(F19*F22 + F25*F28 + F3*F6) + G[138]*(F20*F20 + F23*F23 + F26*F26 + F29*F29 + F4*F4 + F7*F7) + G[139]*(F20*F23 + F26*F29 + F4*F7) + G[32]*(F18 + F21) + G[36]*(F19 + F22) + G[37]*(F20 + F23))));
      
      
      // Number of operations for primary indices: 1
      // Number of operations to compute entry: 1
      A[0] += I[0];
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentumresidualglobal3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentumresidualglobal3d_form_0::nsemomentumresidualglobal3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_form_0::~nsemomentumresidualglobal3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentumresidualglobal3d_form_0::signature() const
{
    return "Form([Integral(Product(Argument(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), IndexSum(Product(Indexed(Sum(ComponentTensor(Division(Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), MultiIndex((Index(1),), {Index(1): 3})), Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(2),), {Index(2): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(2),), {Index(2): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(4), Index(2)), {Index(4): 3, Index(2): 3})), MultiIndex((Index(5), Index(6)), {Index(5): 3, Index(6): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4)), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 5), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(5),), {Index(5): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3})))), MultiIndex((Index(9),), {Index(9): 3})), Indexed(Sum(ComponentTensor(Division(Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), MultiIndex((Index(1),), {Index(1): 3})), Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(10),), {Index(10): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(5), Index(6)), {Index(5): 3, Index(6): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4)), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 5), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(5),), {Index(5): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(12),), {Index(12): 3})), MultiIndex((Index(12),), {Index(12): 3})))), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentumresidualglobal3d_form_0::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsemomentumresidualglobal3d_form_0::num_coefficients() const
{
    return 6;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentumresidualglobal3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentumresidualglobal3d_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentumresidualglobal3d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentumresidualglobal3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentumresidualglobal3d_form_0::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentumresidualglobal3d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentumresidualglobal3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_finite_element_0();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_finite_element_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_finite_element_2();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    case 6:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentumresidualglobal3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentumresidualglobal3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentumresidualglobal3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentumresidualglobal3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentumresidualglobal3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsemomentumresidualglobal3d_form_1::nsemomentumresidualglobal3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentumresidualglobal3d_form_1::~nsemomentumresidualglobal3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentumresidualglobal3d_form_1::signature() const
{
    return "Form([Integral(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), IndexSum(Product(Indexed(Sum(ComponentTensor(Division(Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), MultiIndex((Index(1),), {Index(1): 3})), Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(2),), {Index(2): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(2),), {Index(2): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(4), Index(2)), {Index(4): 3, Index(2): 3})), MultiIndex((Index(5), Index(6)), {Index(5): 3, Index(6): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4)), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 5), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(5),), {Index(5): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3})))), MultiIndex((Index(9),), {Index(9): 3})), Indexed(Sum(ComponentTensor(Division(Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), MultiIndex((Index(1),), {Index(1): 3})), Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(10),), {Index(10): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(5), Index(6)), {Index(5): 3, Index(6): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 4)), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 5), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(5),), {Index(5): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(12),), {Index(12): 3})), MultiIndex((Index(12),), {Index(12): 3})))), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3}))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentumresidualglobal3d_form_1::rank() const
{
    return 0;
}

/// Return the number of coefficients (n)
unsigned int nsemomentumresidualglobal3d_form_1::num_coefficients() const
{
    return 6;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentumresidualglobal3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentumresidualglobal3d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentumresidualglobal3d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentumresidualglobal3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentumresidualglobal3d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentumresidualglobal3d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentumresidualglobal3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_finite_element_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_finite_element_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentumresidualglobal3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentumresidualglobal3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentumresidualglobal3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentumresidualglobal3d_dofmap_2();
        break;
      }
    case 4:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentumresidualglobal3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentumresidualglobal3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentumresidualglobal3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentumresidualglobal3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentumresidualglobal3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

