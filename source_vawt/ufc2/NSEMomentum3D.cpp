// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEMomentum3D.h"

/// Constructor
nsemomentum3d_finite_element_0::nsemomentum3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_0::~nsemomentum3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_0::create() const
{
    return new nsemomentum3d_finite_element_0();
}
#endif


/// Constructor
nsemomentum3d_finite_element_1::nsemomentum3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_1::~nsemomentum3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_1::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_1::create() const
{
    return new nsemomentum3d_finite_element_1();
}
#endif


/// Constructor
nsemomentum3d_finite_element_2::nsemomentum3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_2::~nsemomentum3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_2::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_2::num_sub_elements() const
{
    return 3;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_2::create() const
{
    return new nsemomentum3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_0::nsemomentum3d_dofmap_0() : ufc::dofmap()
#else
nsemomentum3d_dofmap_0::nsemomentum3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_0::~nsemomentum3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_0::create() const
{
    return new nsemomentum3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_1::nsemomentum3d_dofmap_1() : ufc::dofmap()
#else
nsemomentum3d_dofmap_1::nsemomentum3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_1::~nsemomentum3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_1::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_1::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_1::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_1::create() const
{
    return new nsemomentum3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_2::nsemomentum3d_dofmap_2() : ufc::dofmap()
#else
nsemomentum3d_dofmap_2::nsemomentum3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_2::~nsemomentum3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 3*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_2::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_2::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_2::num_facet_dofs() const
{
    return 9;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_2::num_sub_dofmaps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_2::create() const
{
    return new nsemomentum3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_2::num_sub_dof_maps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
nsemomentum3d_cell_integral_0_0::nsemomentum3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_cell_integral_0_0::~nsemomentum3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Value of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[4][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 889.
    double G[178];
    G[0] = 0.5*K_01*K_01*det*w[3][0]*w[5][0];
    G[1] = 0.125*K_01*K_01*det*w[3][0]*w[5][0];
    G[2] = -0.5*K_01*K_01*det*w[3][0]*w[5][0];
    G[3] = 0.25*K_01*K_02*det*w[3][0]*w[5][0];
    G[4] = -0.5*K_01*K_02*det*w[3][0]*w[5][0];
    G[5] = 0.25*K_00*K_01*det*w[3][0]*w[5][0];
    G[6] = -0.5*K_00*K_01*det*w[3][0]*w[5][0];
    G[7] = 0.25*K_01*K_01*det*w[3][0]*w[5][0];
    G[8] = K_01*K_02*det*w[3][0]*w[5][0];
    G[9] = K_00*K_01*det*w[3][0]*w[5][0];
    G[10] = 0.125*K_02*K_02*det*w[3][0]*w[5][0];
    G[11] = 0.25*K_02*K_02*det*w[3][0]*w[5][0];
    G[12] = -0.5*K_02*K_02*det*w[3][0]*w[5][0];
    G[13] = 0.25*K_00*K_02*det*w[3][0]*w[5][0];
    G[14] = -0.5*K_00*K_02*det*w[3][0]*w[5][0];
    G[15] = 0.5*K_02*K_02*det*w[3][0]*w[5][0];
    G[16] = K_00*K_02*det*w[3][0]*w[5][0];
    G[17] = 0.5*det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[18] = 0.125*K_00*K_00*det*w[3][0]*w[5][0];
    G[19] = 0.25*K_00*K_00*det*w[3][0]*w[5][0];
    G[20] = -0.5*K_00*K_00*det*w[3][0]*w[5][0];
    G[21] = 0.5*K_00*K_00*det*w[3][0]*w[5][0];
    G[22] = 0.5*K_01*K_22*det*w[3][0]*w[5][0];
    G[23] = 0.5*K_01*K_12*det*w[3][0]*w[5][0];
    G[24] = 0.5*K_01*K_02*det*w[3][0]*w[5][0];
    G[25] = 0.5*K_01*K_20*det*w[3][0]*w[5][0];
    G[26] = 0.5*K_01*K_10*det*w[3][0]*w[5][0];
    G[27] = 0.5*K_00*K_01*det*w[3][0]*w[5][0];
    G[28] = 0.5*K_01*K_21*det*w[3][0]*w[5][0];
    G[29] = 0.125*K_01*K_21*det*w[3][0]*w[5][0];
    G[30] = -0.5*K_01*K_21*det*w[3][0]*w[5][0];
    G[31] = 0.125*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[32] = -0.25*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[33] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[34] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[35] = 0.25*K_01*K_21*det*w[3][0]*w[5][0];
    G[36] = 0.5*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[37] = 0.5*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[38] = 0.125*K_02*K_22*det*w[3][0]*w[5][0];
    G[39] = 0.25*K_02*K_22*det*w[3][0]*w[5][0];
    G[40] = -0.5*K_02*K_22*det*w[3][0]*w[5][0];
    G[41] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[42] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[43] = 0.5*K_02*K_22*det*w[3][0]*w[5][0];
    G[44] = 0.5*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[45] = 0.5*det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[46] = 0.125*K_00*K_20*det*w[3][0]*w[5][0];
    G[47] = 0.25*K_00*K_20*det*w[3][0]*w[5][0];
    G[48] = -0.5*K_00*K_20*det*w[3][0]*w[5][0];
    G[49] = 0.5*K_00*K_20*det*w[3][0]*w[5][0];
    G[50] = 0.5*K_01*K_11*det*w[3][0]*w[5][0];
    G[51] = 0.125*K_01*K_11*det*w[3][0]*w[5][0];
    G[52] = -0.5*K_01*K_11*det*w[3][0]*w[5][0];
    G[53] = 0.125*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[54] = -0.25*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[55] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[56] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[57] = 0.25*K_01*K_11*det*w[3][0]*w[5][0];
    G[58] = 0.5*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[59] = 0.5*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[60] = 0.125*K_02*K_12*det*w[3][0]*w[5][0];
    G[61] = 0.25*K_02*K_12*det*w[3][0]*w[5][0];
    G[62] = -0.5*K_02*K_12*det*w[3][0]*w[5][0];
    G[63] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[64] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[65] = 0.5*K_02*K_12*det*w[3][0]*w[5][0];
    G[66] = 0.5*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[67] = 0.5*det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[68] = 0.125*K_00*K_10*det*w[3][0]*w[5][0];
    G[69] = 0.25*K_00*K_10*det*w[3][0]*w[5][0];
    G[70] = -0.5*K_00*K_10*det*w[3][0]*w[5][0];
    G[71] = 0.5*K_00*K_10*det*w[3][0]*w[5][0];
    G[72] = 0.5*K_22*K_22*det*w[3][0]*w[5][0];
    G[73] = 0.125*K_21*K_21*det*w[3][0]*w[5][0];
    G[74] = -0.5*K_21*K_21*det*w[3][0]*w[5][0];
    G[75] = 0.25*K_21*K_22*det*w[3][0]*w[5][0];
    G[76] = -0.5*K_21*K_22*det*w[3][0]*w[5][0];
    G[77] = 0.25*K_20*K_21*det*w[3][0]*w[5][0];
    G[78] = -0.5*K_20*K_21*det*w[3][0]*w[5][0];
    G[79] = 0.25*K_21*K_21*det*w[3][0]*w[5][0];
    G[80] = 0.5*K_21*K_21*det*w[3][0]*w[5][0];
    G[81] = K_21*K_22*det*w[3][0]*w[5][0];
    G[82] = K_20*K_21*det*w[3][0]*w[5][0];
    G[83] = 0.125*K_22*K_22*det*w[3][0]*w[5][0];
    G[84] = 0.25*K_22*K_22*det*w[3][0]*w[5][0];
    G[85] = -0.5*K_22*K_22*det*w[3][0]*w[5][0];
    G[86] = 0.25*K_20*K_22*det*w[3][0]*w[5][0];
    G[87] = -0.5*K_20*K_22*det*w[3][0]*w[5][0];
    G[88] = K_20*K_22*det*w[3][0]*w[5][0];
    G[89] = 0.5*det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[90] = 0.125*K_20*K_20*det*w[3][0]*w[5][0];
    G[91] = 0.25*K_20*K_20*det*w[3][0]*w[5][0];
    G[92] = -0.5*K_20*K_20*det*w[3][0]*w[5][0];
    G[93] = 0.5*K_20*K_20*det*w[3][0]*w[5][0];
    G[94] = 0.5*K_12*K_22*det*w[3][0]*w[5][0];
    G[95] = 0.125*K_11*K_21*det*w[3][0]*w[5][0];
    G[96] = -0.5*K_11*K_21*det*w[3][0]*w[5][0];
    G[97] = 0.125*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[98] = -0.25*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[99] = 0.125*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[100] = -0.25*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[101] = 0.25*K_11*K_21*det*w[3][0]*w[5][0];
    G[102] = 0.5*K_11*K_21*det*w[3][0]*w[5][0];
    G[103] = 0.5*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[104] = 0.5*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[105] = 0.125*K_12*K_22*det*w[3][0]*w[5][0];
    G[106] = 0.25*K_12*K_22*det*w[3][0]*w[5][0];
    G[107] = -0.5*K_12*K_22*det*w[3][0]*w[5][0];
    G[108] = 0.125*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[109] = -0.25*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[110] = 0.5*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[111] = 0.5*det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[112] = 0.125*K_10*K_20*det*w[3][0]*w[5][0];
    G[113] = 0.25*K_10*K_20*det*w[3][0]*w[5][0];
    G[114] = -0.5*K_10*K_20*det*w[3][0]*w[5][0];
    G[115] = 0.5*K_10*K_20*det*w[3][0]*w[5][0];
    G[116] = 0.5*K_20*K_22*det*w[3][0]*w[5][0];
    G[117] = 0.5*K_10*K_22*det*w[3][0]*w[5][0];
    G[118] = 0.5*K_00*K_22*det*w[3][0]*w[5][0];
    G[119] = 0.5*K_21*K_22*det*w[3][0]*w[5][0];
    G[120] = 0.5*K_11*K_22*det*w[3][0]*w[5][0];
    G[121] = 0.5*K_12*K_12*det*w[3][0]*w[5][0];
    G[122] = 0.125*K_11*K_11*det*w[3][0]*w[5][0];
    G[123] = -0.5*K_11*K_11*det*w[3][0]*w[5][0];
    G[124] = 0.25*K_11*K_12*det*w[3][0]*w[5][0];
    G[125] = -0.5*K_11*K_12*det*w[3][0]*w[5][0];
    G[126] = 0.25*K_10*K_11*det*w[3][0]*w[5][0];
    G[127] = -0.5*K_10*K_11*det*w[3][0]*w[5][0];
    G[128] = 0.25*K_11*K_11*det*w[3][0]*w[5][0];
    G[129] = 0.5*K_11*K_11*det*w[3][0]*w[5][0];
    G[130] = K_11*K_12*det*w[3][0]*w[5][0];
    G[131] = K_10*K_11*det*w[3][0]*w[5][0];
    G[132] = 0.125*K_12*K_12*det*w[3][0]*w[5][0];
    G[133] = 0.25*K_12*K_12*det*w[3][0]*w[5][0];
    G[134] = -0.5*K_12*K_12*det*w[3][0]*w[5][0];
    G[135] = 0.25*K_10*K_12*det*w[3][0]*w[5][0];
    G[136] = -0.5*K_10*K_12*det*w[3][0]*w[5][0];
    G[137] = K_10*K_12*det*w[3][0]*w[5][0];
    G[138] = 0.5*det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[139] = 0.125*K_10*K_10*det*w[3][0]*w[5][0];
    G[140] = 0.25*K_10*K_10*det*w[3][0]*w[5][0];
    G[141] = -0.5*K_10*K_10*det*w[3][0]*w[5][0];
    G[142] = 0.5*K_10*K_10*det*w[3][0]*w[5][0];
    G[143] = 0.5*K_12*K_20*det*w[3][0]*w[5][0];
    G[144] = 0.5*K_10*K_12*det*w[3][0]*w[5][0];
    G[145] = 0.5*K_00*K_12*det*w[3][0]*w[5][0];
    G[146] = 0.5*K_12*K_21*det*w[3][0]*w[5][0];
    G[147] = 0.5*K_11*K_12*det*w[3][0]*w[5][0];
    G[148] = 0.5*K_02*K_20*det*w[3][0]*w[5][0];
    G[149] = 0.5*K_02*K_10*det*w[3][0]*w[5][0];
    G[150] = 0.5*K_00*K_02*det*w[3][0]*w[5][0];
    G[151] = 0.5*K_02*K_21*det*w[3][0]*w[5][0];
    G[152] = 0.5*K_02*K_11*det*w[3][0]*w[5][0];
    G[153] = 0.5*K_20*K_21*det*w[3][0]*w[5][0];
    G[154] = 0.5*K_11*K_20*det*w[3][0]*w[5][0];
    G[155] = 0.5*K_10*K_21*det*w[3][0]*w[5][0];
    G[156] = 0.5*K_10*K_11*det*w[3][0]*w[5][0];
    G[157] = 0.5*K_00*K_21*det*w[3][0]*w[5][0];
    G[158] = 0.5*K_00*K_11*det*w[3][0]*w[5][0];
    G[159] = 0.25*K_21*det;
    G[160] = -0.5*K_21*det;
    G[161] = 0.25*K_22*det;
    G[162] = -0.5*K_22*det;
    G[163] = 0.25*K_20*det;
    G[164] = -0.5*K_20*det;
    G[165] = 0.25*K_11*det;
    G[166] = -0.5*K_11*det;
    G[167] = 0.25*K_12*det;
    G[168] = -0.5*K_12*det;
    G[169] = 0.25*K_10*det;
    G[170] = -0.5*K_10*det;
    G[171] = 0.25*K_01*det;
    G[172] = -0.5*K_01*det;
    G[173] = 0.25*K_02*det;
    G[174] = -0.5*K_02*det;
    G[175] = 0.25*K_00*det;
    G[176] = -0.5*K_00*det;
    G[177] = det/w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 28208
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      
      // Total number of operations to compute function values = 84
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F1 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F2 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F3 += FE0_D001[ip][r]*w[6][nzc6[r]];
        F4 += FE0_D001[ip][r]*w[6][nzc5[r]];
        F5 += FE0_D001[ip][r]*w[6][nzc4[r]];
        F15 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F16 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F17 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F18 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F19 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F21 += FE0_D001[ip][r]*w[6][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[6][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[6][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F25 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F26 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F27 += FE0_D001[ip][r]*w[6][nzc14[r]];
        F28 += FE0_D001[ip][r]*w[6][nzc13[r]];
        F29 += FE0_D001[ip][r]*w[6][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 80
      for (unsigned int r = 0; r < 4; r++)
      {
        F6 += FE0[ip][r]*w[0][nzc3[r]];
        F7 += FE0[ip][r]*w[6][nzc3[r]];
        F8 += FE0[ip][r]*w[9][nzc3[r]];
        F9 += FE0[ip][r]*w[0][nzc7[r]];
        F10 += FE0[ip][r]*w[6][nzc7[r]];
        F11 += FE0[ip][r]*w[9][nzc7[r]];
        F12 += FE0[ip][r]*w[0][nzc11[r]];
        F13 += FE0[ip][r]*w[6][nzc11[r]];
        F14 += FE0[ip][r]*w[9][nzc11[r]];
        F30 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 4620
      double I[84];
      // Number of operations: 95
      I[0] = W4[ip]*(F10*(F10*G[1] + F11*G[2]) + F12*(F10*G[3] + F11*G[4] + F12*G[10]) + F13*(F10*G[3] + F11*G[4] + F12*G[11] + F13*G[10]) + F14*(F10*G[4] + F11*G[8] + F14*G[15] + G[12]*(F12 + F13)) + F30*G[17] + F6*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[18] + G[13]*(F12 + F13)) + F7*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[19] + F7*G[18] + G[13]*(F12 + F13)) + F8*(F10*G[6] + F11*G[9] + F14*G[16] + F8*G[21] + G[14]*(F12 + F13) + G[20]*(F6 + F7)) + F9*(F10*G[7] + F11*G[2] + F14*G[4] + F8*G[6] + F9*G[1] + G[3]*(F12 + F13) + G[5]*(F6 + F7)) + G[0]*(1.0 + F11*F11));
      
      // Number of operations: 1
      I[1] = G[22]*W4[ip];
      
      // Number of operations: 1
      I[2] = G[23]*W4[ip];
      
      // Number of operations: 1
      I[3] = G[24]*W4[ip];
      
      // Number of operations: 1
      I[4] = G[25]*W4[ip];
      
      // Number of operations: 1
      I[5] = G[26]*W4[ip];
      
      // Number of operations: 1
      I[6] = G[27]*W4[ip];
      
      // Number of operations: 95
      I[7] = W4[ip]*(F10*(F10*G[29] + F11*G[30]) + F12*(F10*G[31] + F11*G[32] + F12*G[38]) + F13*(F10*G[31] + F11*G[32] + F12*G[39] + F13*G[38]) + F14*(F10*G[32] + F11*G[36] + F14*G[43] + G[40]*(F12 + F13)) + F30*G[45] + F6*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[46] + G[41]*(F12 + F13)) + F7*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[47] + F7*G[46] + G[41]*(F12 + F13)) + F8*(F10*G[34] + F11*G[37] + F14*G[44] + F8*G[49] + G[42]*(F12 + F13) + G[48]*(F6 + F7)) + F9*(F10*G[35] + F11*G[30] + F14*G[32] + F8*G[34] + F9*G[29] + G[31]*(F12 + F13) + G[33]*(F6 + F7)) + G[28]*(1.0 + F11*F11));
      
      // Number of operations: 95
      I[8] = W4[ip]*(F10*(F10*G[51] + F11*G[52]) + F12*(F10*G[53] + F11*G[54] + F12*G[60]) + F13*(F10*G[53] + F11*G[54] + F12*G[61] + F13*G[60]) + F14*(F10*G[54] + F11*G[58] + F14*G[65] + G[62]*(F12 + F13)) + F30*G[67] + F6*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[68] + G[63]*(F12 + F13)) + F7*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[69] + F7*G[68] + G[63]*(F12 + F13)) + F8*(F10*G[56] + F11*G[59] + F14*G[66] + F8*G[71] + G[64]*(F12 + F13) + G[70]*(F6 + F7)) + F9*(F10*G[57] + F11*G[52] + F14*G[54] + F8*G[56] + F9*G[51] + G[53]*(F12 + F13) + G[55]*(F6 + F7)) + G[50]*(1.0 + F11*F11));
      
      // Number of operations: 95
      I[9] = W4[ip]*(G[72] + F10*F10*G[73] + F11*(F10*G[74] + F11*G[80]) + F12*(F10*G[75] + F11*G[76] + F12*G[83]) + F13*(F10*G[75] + F11*G[76] + F12*G[84] + F13*G[83]) + F14*(F10*G[76] + F11*G[81] + F14*G[72] + G[85]*(F12 + F13)) + F30*G[89] + F6*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[90] + G[86]*(F12 + F13)) + F7*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[91] + F7*G[90] + G[86]*(F12 + F13)) + F8*(F10*G[78] + F11*G[82] + F14*G[88] + F8*G[93] + G[87]*(F12 + F13) + G[92]*(F6 + F7)) + F9*(F10*G[79] + F11*G[74] + F14*G[76] + F8*G[78] + F9*G[73] + G[75]*(F12 + F13) + G[77]*(F6 + F7)));
      
      // Number of operations: 95
      I[10] = W4[ip]*(G[94] + F10*F10*G[95] + F11*(F10*G[96] + F11*G[102]) + F12*(F10*G[97] + F11*G[98] + F12*G[105]) + F13*(F10*G[97] + F11*G[98] + F12*G[106] + F13*G[105]) + F14*(F10*G[98] + F11*G[103] + F14*G[94] + G[107]*(F12 + F13)) + F30*G[111] + F6*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[112] + G[108]*(F12 + F13)) + F7*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[113] + F7*G[112] + G[108]*(F12 + F13)) + F8*(F10*G[100] + F11*G[104] + F14*G[110] + F8*G[115] + G[109]*(F12 + F13) + G[114]*(F6 + F7)) + F9*(F10*G[101] + F11*G[96] + F14*G[98] + F8*G[100] + F9*G[95] + G[97]*(F12 + F13) + G[99]*(F6 + F7)));
      
      // Number of operations: 95
      I[11] = W4[ip]*(G[43] + F10*F10*G[29] + F11*(F10*G[30] + F11*G[28]) + F12*(F10*G[31] + F11*G[32] + F12*G[38]) + F13*(F10*G[31] + F11*G[32] + F12*G[39] + F13*G[38]) + F14*(F10*G[32] + F11*G[36] + F14*G[43] + G[40]*(F12 + F13)) + F30*G[45] + F6*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[46] + G[41]*(F12 + F13)) + F7*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[47] + F7*G[46] + G[41]*(F12 + F13)) + F8*(F10*G[34] + F11*G[37] + F14*G[44] + F8*G[49] + G[42]*(F12 + F13) + G[48]*(F6 + F7)) + F9*(F10*G[35] + F11*G[30] + F14*G[32] + F8*G[34] + F9*G[29] + G[31]*(F12 + F13) + G[33]*(F6 + F7)));
      
      // Number of operations: 1
      I[12] = G[116]*W4[ip];
      
      // Number of operations: 1
      I[13] = G[117]*W4[ip];
      
      // Number of operations: 1
      I[14] = G[118]*W4[ip];
      
      // Number of operations: 1
      I[15] = G[119]*W4[ip];
      
      // Number of operations: 1
      I[16] = G[120]*W4[ip];
      
      // Number of operations: 95
      I[17] = W4[ip]*(G[121] + F10*F10*G[122] + F11*(F10*G[123] + F11*G[129]) + F12*(F10*G[124] + F11*G[125] + F12*G[132]) + F13*(F10*G[124] + F11*G[125] + F12*G[133] + F13*G[132]) + F14*(F10*G[125] + F11*G[130] + F14*G[121] + G[134]*(F12 + F13)) + F30*G[138] + F6*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[139] + G[135]*(F12 + F13)) + F7*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[140] + F7*G[139] + G[135]*(F12 + F13)) + F8*(F10*G[127] + F11*G[131] + F14*G[137] + F8*G[142] + G[136]*(F12 + F13) + G[141]*(F6 + F7)) + F9*(F10*G[128] + F11*G[123] + F14*G[125] + F8*G[127] + F9*G[122] + G[124]*(F12 + F13) + G[126]*(F6 + F7)));
      
      // Number of operations: 95
      I[18] = W4[ip]*(G[65] + F10*F10*G[51] + F11*(F10*G[52] + F11*G[50]) + F12*(F10*G[53] + F11*G[54] + F12*G[60]) + F13*(F10*G[53] + F11*G[54] + F12*G[61] + F13*G[60]) + F14*(F10*G[54] + F11*G[58] + F14*G[65] + G[62]*(F12 + F13)) + F30*G[67] + F6*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[68] + G[63]*(F12 + F13)) + F7*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[69] + F7*G[68] + G[63]*(F12 + F13)) + F8*(F10*G[56] + F11*G[59] + F14*G[66] + F8*G[71] + G[64]*(F12 + F13) + G[70]*(F6 + F7)) + F9*(F10*G[57] + F11*G[52] + F14*G[54] + F8*G[56] + F9*G[51] + G[53]*(F12 + F13) + G[55]*(F6 + F7)));
      
      // Number of operations: 1
      I[19] = G[143]*W4[ip];
      
      // Number of operations: 1
      I[20] = G[144]*W4[ip];
      
      // Number of operations: 1
      I[21] = G[145]*W4[ip];
      
      // Number of operations: 1
      I[22] = G[146]*W4[ip];
      
      // Number of operations: 1
      I[23] = G[147]*W4[ip];
      
      // Number of operations: 95
      I[24] = W4[ip]*(G[15] + F10*F10*G[1] + F11*(F10*G[2] + F11*G[0]) + F12*(F10*G[3] + F11*G[4] + F12*G[10]) + F13*(F10*G[3] + F11*G[4] + F12*G[11] + F13*G[10]) + F14*(F10*G[4] + F11*G[8] + F14*G[15] + G[12]*(F12 + F13)) + F30*G[17] + F6*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[18] + G[13]*(F12 + F13)) + F7*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[19] + F7*G[18] + G[13]*(F12 + F13)) + F8*(F10*G[6] + F11*G[9] + F14*G[16] + F8*G[21] + G[14]*(F12 + F13) + G[20]*(F6 + F7)) + F9*(F10*G[7] + F11*G[2] + F14*G[4] + F8*G[6] + F9*G[1] + G[3]*(F12 + F13) + G[5]*(F6 + F7)));
      
      // Number of operations: 1
      I[25] = G[148]*W4[ip];
      
      // Number of operations: 1
      I[26] = G[149]*W4[ip];
      
      // Number of operations: 1
      I[27] = G[150]*W4[ip];
      
      // Number of operations: 1
      I[28] = G[151]*W4[ip];
      
      // Number of operations: 1
      I[29] = G[152]*W4[ip];
      
      // Number of operations: 95
      I[30] = W4[ip]*(G[93] + F10*F10*G[73] + F11*(F10*G[74] + F11*G[80]) + F12*(F10*G[75] + F11*G[76] + F12*G[83]) + F13*(F10*G[75] + F11*G[76] + F12*G[84] + F13*G[83]) + F14*(F10*G[76] + F11*G[81] + F14*G[72] + G[85]*(F12 + F13)) + F30*G[89] + F6*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[90] + G[86]*(F12 + F13)) + F7*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[91] + F7*G[90] + G[86]*(F12 + F13)) + F8*(F10*G[78] + F11*G[82] + F14*G[88] + F8*G[93] + G[87]*(F12 + F13) + G[92]*(F6 + F7)) + F9*(F10*G[79] + F11*G[74] + F14*G[76] + F8*G[78] + F9*G[73] + G[75]*(F12 + F13) + G[77]*(F6 + F7)));
      
      // Number of operations: 95
      I[31] = W4[ip]*(G[115] + F10*F10*G[95] + F11*(F10*G[96] + F11*G[102]) + F12*(F10*G[97] + F11*G[98] + F12*G[105]) + F13*(F10*G[97] + F11*G[98] + F12*G[106] + F13*G[105]) + F14*(F10*G[98] + F11*G[103] + F14*G[94] + G[107]*(F12 + F13)) + F30*G[111] + F6*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[112] + G[108]*(F12 + F13)) + F7*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[113] + F7*G[112] + G[108]*(F12 + F13)) + F8*(F10*G[100] + F11*G[104] + F14*G[110] + F8*G[115] + G[109]*(F12 + F13) + G[114]*(F6 + F7)) + F9*(F10*G[101] + F11*G[96] + F14*G[98] + F8*G[100] + F9*G[95] + G[97]*(F12 + F13) + G[99]*(F6 + F7)));
      
      // Number of operations: 95
      I[32] = W4[ip]*(G[49] + F10*F10*G[29] + F11*(F10*G[30] + F11*G[28]) + F12*(F10*G[31] + F11*G[32] + F12*G[38]) + F13*(F10*G[31] + F11*G[32] + F12*G[39] + F13*G[38]) + F14*(F10*G[32] + F11*G[36] + F14*G[43] + G[40]*(F12 + F13)) + F30*G[45] + F6*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[46] + G[41]*(F12 + F13)) + F7*(F10*G[33] + F11*G[34] + F14*G[42] + F6*G[47] + F7*G[46] + G[41]*(F12 + F13)) + F8*(F10*G[34] + F11*G[37] + F14*G[44] + F8*G[49] + G[42]*(F12 + F13) + G[48]*(F6 + F7)) + F9*(F10*G[35] + F11*G[30] + F14*G[32] + F8*G[34] + F9*G[29] + G[31]*(F12 + F13) + G[33]*(F6 + F7)));
      
      // Number of operations: 1
      I[33] = G[153]*W4[ip];
      
      // Number of operations: 1
      I[34] = G[154]*W4[ip];
      
      // Number of operations: 95
      I[35] = W4[ip]*(G[142] + F10*F10*G[122] + F11*(F10*G[123] + F11*G[129]) + F12*(F10*G[124] + F11*G[125] + F12*G[132]) + F13*(F10*G[124] + F11*G[125] + F12*G[133] + F13*G[132]) + F14*(F10*G[125] + F11*G[130] + F14*G[121] + G[134]*(F12 + F13)) + F30*G[138] + F6*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[139] + G[135]*(F12 + F13)) + F7*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[140] + F7*G[139] + G[135]*(F12 + F13)) + F8*(F10*G[127] + F11*G[131] + F14*G[137] + F8*G[142] + G[136]*(F12 + F13) + G[141]*(F6 + F7)) + F9*(F10*G[128] + F11*G[123] + F14*G[125] + F8*G[127] + F9*G[122] + G[124]*(F12 + F13) + G[126]*(F6 + F7)));
      
      // Number of operations: 95
      I[36] = W4[ip]*(G[71] + F10*F10*G[51] + F11*(F10*G[52] + F11*G[50]) + F12*(F10*G[53] + F11*G[54] + F12*G[60]) + F13*(F10*G[53] + F11*G[54] + F12*G[61] + F13*G[60]) + F14*(F10*G[54] + F11*G[58] + F14*G[65] + G[62]*(F12 + F13)) + F30*G[67] + F6*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[68] + G[63]*(F12 + F13)) + F7*(F10*G[55] + F11*G[56] + F14*G[64] + F6*G[69] + F7*G[68] + G[63]*(F12 + F13)) + F8*(F10*G[56] + F11*G[59] + F14*G[66] + F8*G[71] + G[64]*(F12 + F13) + G[70]*(F6 + F7)) + F9*(F10*G[57] + F11*G[52] + F14*G[54] + F8*G[56] + F9*G[51] + G[53]*(F12 + F13) + G[55]*(F6 + F7)));
      
      // Number of operations: 1
      I[37] = G[155]*W4[ip];
      
      // Number of operations: 1
      I[38] = G[156]*W4[ip];
      
      // Number of operations: 95
      I[39] = W4[ip]*(G[21] + F10*F10*G[1] + F11*(F10*G[2] + F11*G[0]) + F12*(F10*G[3] + F11*G[4] + F12*G[10]) + F13*(F10*G[3] + F11*G[4] + F12*G[11] + F13*G[10]) + F14*(F10*G[4] + F11*G[8] + F14*G[15] + G[12]*(F12 + F13)) + F30*G[17] + F6*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[18] + G[13]*(F12 + F13)) + F7*(F10*G[5] + F11*G[6] + F14*G[14] + F6*G[19] + F7*G[18] + G[13]*(F12 + F13)) + F8*(F10*G[6] + F11*G[9] + F14*G[16] + F8*G[21] + G[14]*(F12 + F13) + G[20]*(F6 + F7)) + F9*(F10*G[7] + F11*G[2] + F14*G[4] + F8*G[6] + F9*G[1] + G[3]*(F12 + F13) + G[5]*(F6 + F7)));
      
      // Number of operations: 1
      I[40] = G[157]*W4[ip];
      
      // Number of operations: 1
      I[41] = G[158]*W4[ip];
      
      // Number of operations: 95
      I[42] = W4[ip]*(F10*(F10*G[73] + F11*G[74]) + F12*(F10*G[75] + F11*G[76] + F12*G[83]) + F13*(F10*G[75] + F11*G[76] + F12*G[84] + F13*G[83]) + F14*(F10*G[76] + F11*G[81] + F14*G[72] + G[85]*(F12 + F13)) + F30*G[89] + F6*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[90] + G[86]*(F12 + F13)) + F7*(F10*G[77] + F11*G[78] + F14*G[87] + F6*G[91] + F7*G[90] + G[86]*(F12 + F13)) + F8*(F10*G[78] + F11*G[82] + F14*G[88] + F8*G[93] + G[87]*(F12 + F13) + G[92]*(F6 + F7)) + F9*(F10*G[79] + F11*G[74] + F14*G[76] + F8*G[78] + F9*G[73] + G[75]*(F12 + F13) + G[77]*(F6 + F7)) + G[80]*(1.0 + F11*F11));
      
      // Number of operations: 95
      I[43] = W4[ip]*(F10*(F10*G[95] + F11*G[96]) + F12*(F10*G[97] + F11*G[98] + F12*G[105]) + F13*(F10*G[97] + F11*G[98] + F12*G[106] + F13*G[105]) + F14*(F10*G[98] + F11*G[103] + F14*G[94] + G[107]*(F12 + F13)) + F30*G[111] + F6*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[112] + G[108]*(F12 + F13)) + F7*(F10*G[99] + F11*G[100] + F14*G[109] + F6*G[113] + F7*G[112] + G[108]*(F12 + F13)) + F8*(F10*G[100] + F11*G[104] + F14*G[110] + F8*G[115] + G[109]*(F12 + F13) + G[114]*(F6 + F7)) + F9*(F10*G[101] + F11*G[96] + F14*G[98] + F8*G[100] + F9*G[95] + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + G[102]*(1.0 + F11*F11));
      
      // Number of operations: 95
      I[44] = W4[ip]*(F10*(F10*G[122] + F11*G[123]) + F12*(F10*G[124] + F11*G[125] + F12*G[132]) + F13*(F10*G[124] + F11*G[125] + F12*G[133] + F13*G[132]) + F14*(F10*G[125] + F11*G[130] + F14*G[121] + G[134]*(F12 + F13)) + F30*G[138] + F6*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[139] + G[135]*(F12 + F13)) + F7*(F10*G[126] + F11*G[127] + F14*G[136] + F6*G[140] + F7*G[139] + G[135]*(F12 + F13)) + F8*(F10*G[127] + F11*G[131] + F14*G[137] + F8*G[142] + G[136]*(F12 + F13) + G[141]*(F6 + F7)) + F9*(F10*G[128] + F11*G[123] + F14*G[125] + F8*G[127] + F9*G[122] + G[124]*(F12 + F13) + G[126]*(F6 + F7)) + G[129]*(1.0 + F11*F11));
      
      // Number of operations: 102
      I[45] = W4[ip]*(F15*G[24] + F16*G[152] + F17*G[151] + F18*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F19*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F20*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F21*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F22*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F23*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)));
      
      // Number of operations: 102
      I[46] = W4[ip]*(F15*G[27] + F16*G[158] + F17*G[157] + F18*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F19*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F20*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F21*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F22*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F23*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)));
      
      // Number of operations: 102
      I[47] = W4[ip]*(F15*G[0] + F16*G[50] + F17*G[28] + F18*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F19*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F20*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F21*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F22*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F23*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)));
      
      // Number of operations: 102
      I[48] = W4[ip]*(F15*G[43] + F16*G[94] + F17*G[72] + F24*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F25*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F26*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)) + F27*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F28*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F29*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)));
      
      // Number of operations: 102
      I[49] = W4[ip]*(F15*G[148] + F16*G[143] + F17*G[116] + F24*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F25*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F26*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)) + F27*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F28*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F29*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)));
      
      // Number of operations: 102
      I[50] = W4[ip]*(F15*G[151] + F16*G[146] + F17*G[119] + F24*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F25*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F26*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)) + F27*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F28*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F29*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)));
      
      // Number of operations: 102
      I[51] = W4[ip]*(F15*G[65] + F16*G[121] + F17*G[94] + F24*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F25*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F26*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F27*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F28*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F29*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)));
      
      // Number of operations: 102
      I[52] = W4[ip]*(F15*G[149] + F16*G[144] + F17*G[117] + F24*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F25*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F26*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F27*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F28*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F29*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)));
      
      // Number of operations: 102
      I[53] = W4[ip]*(F15*G[152] + F16*G[147] + F17*G[120] + F24*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F25*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F26*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F27*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F28*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F29*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)));
      
      // Number of operations: 102
      I[54] = W4[ip]*(F15*G[15] + F16*G[65] + F17*G[43] + F24*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F25*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F26*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F27*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F28*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F29*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)));
      
      // Number of operations: 102
      I[55] = W4[ip]*(F15*G[150] + F16*G[145] + F17*G[118] + F24*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F25*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F26*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F27*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F28*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F29*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)));
      
      // Number of operations: 102
      I[56] = W4[ip]*(F15*G[24] + F16*G[23] + F17*G[22] + F24*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F25*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F26*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F27*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F28*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F29*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)));
      
      // Number of operations: 102
      I[57] = W4[ip]*(F0*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F1*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F15*G[118] + F16*G[117] + F17*G[116] + F2*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)) + F3*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F4*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F5*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)));
      
      // Number of operations: 102
      I[58] = W4[ip]*(F0*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F1*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F15*G[49] + F16*G[115] + F17*G[93] + F2*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)) + F3*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F4*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F5*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)));
      
      // Number of operations: 102
      I[59] = W4[ip]*(F0*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F1*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F15*G[157] + F16*G[155] + F17*G[153] + F2*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)) + F3*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F4*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F5*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)));
      
      // Number of operations: 102
      I[60] = W4[ip]*(F0*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F1*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F15*G[145] + F16*G[144] + F17*G[143] + F2*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F3*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F4*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F5*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)));
      
      // Number of operations: 102
      I[61] = W4[ip]*(F0*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F1*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F15*G[71] + F16*G[142] + F17*G[115] + F2*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F3*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F4*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F5*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)));
      
      // Number of operations: 102
      I[62] = W4[ip]*(F0*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F1*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F15*G[158] + F16*G[156] + F17*G[154] + F2*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F3*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F4*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F5*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)));
      
      // Number of operations: 102
      I[63] = W4[ip]*(F0*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F1*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F15*G[150] + F16*G[149] + F17*G[148] + F2*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F3*(F11*G[4] + F14*G[12] + F8*G[14] + G[11]*(F12 + F13) + G[13]*(F6 + F7) + G[3]*(F10 + F9)) + F4*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F5*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)));
      
      // Number of operations: 102
      I[64] = W4[ip]*(F0*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F1*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F15*G[21] + F16*G[71] + F17*G[49] + F2*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F3*(F11*G[6] + F14*G[14] + F8*G[20] + G[13]*(F12 + F13) + G[19]*(F6 + F7) + G[5]*(F10 + F9)) + F4*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F5*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)));
      
      // Number of operations: 102
      I[65] = W4[ip]*(F0*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F1*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F15*G[27] + F16*G[26] + F17*G[25] + F2*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F3*(F11*G[2] + F14*G[4] + F8*G[6] + G[3]*(F12 + F13) + G[5]*(F6 + F7) + G[7]*(F10 + F9)) + F4*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F5*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)));
      
      // Number of operations: 102
      I[66] = W4[ip]*(F15*G[22] + F16*G[120] + F17*G[119] + F18*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F19*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F20*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)) + F21*(F11*G[32] + F14*G[40] + F8*G[42] + G[31]*(F10 + F9) + G[39]*(F12 + F13) + G[41]*(F6 + F7)) + F22*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F23*(F11*G[76] + F14*G[85] + F8*G[87] + G[75]*(F10 + F9) + G[84]*(F12 + F13) + G[86]*(F6 + F7)));
      
      // Number of operations: 102
      I[67] = W4[ip]*(F15*G[25] + F16*G[154] + F17*G[153] + F18*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F19*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F20*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)) + F21*(F11*G[34] + F14*G[42] + F8*G[48] + G[33]*(F10 + F9) + G[41]*(F12 + F13) + G[47]*(F6 + F7)) + F22*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F23*(F11*G[78] + F14*G[87] + F8*G[92] + G[77]*(F10 + F9) + G[86]*(F12 + F13) + G[91]*(F6 + F7)));
      
      // Number of operations: 102
      I[68] = W4[ip]*(F15*G[28] + F16*G[102] + F17*G[80] + F18*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F19*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F20*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)) + F21*(F11*G[30] + F14*G[32] + F8*G[34] + G[31]*(F12 + F13) + G[33]*(F6 + F7) + G[35]*(F10 + F9)) + F22*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F23*(F11*G[74] + F14*G[76] + F8*G[78] + G[75]*(F12 + F13) + G[77]*(F6 + F7) + G[79]*(F10 + F9)));
      
      // Number of operations: 102
      I[69] = W4[ip]*(F15*G[23] + F16*G[147] + F17*G[146] + F18*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F19*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F20*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)) + F21*(F11*G[54] + F14*G[62] + F8*G[64] + G[53]*(F10 + F9) + G[61]*(F12 + F13) + G[63]*(F6 + F7)) + F22*(F11*G[125] + F14*G[134] + F8*G[136] + G[124]*(F10 + F9) + G[133]*(F12 + F13) + G[135]*(F6 + F7)) + F23*(F11*G[98] + F14*G[107] + F8*G[109] + G[106]*(F12 + F13) + G[108]*(F6 + F7) + G[97]*(F10 + F9)));
      
      // Number of operations: 102
      I[70] = W4[ip]*(F15*G[26] + F16*G[156] + F17*G[155] + F18*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F19*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F20*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)) + F21*(F11*G[56] + F14*G[64] + F8*G[70] + G[55]*(F10 + F9) + G[63]*(F12 + F13) + G[69]*(F6 + F7)) + F22*(F11*G[127] + F14*G[136] + F8*G[141] + G[126]*(F10 + F9) + G[135]*(F12 + F13) + G[140]*(F6 + F7)) + F23*(F11*G[100] + F14*G[109] + F8*G[114] + G[108]*(F12 + F13) + G[113]*(F6 + F7) + G[99]*(F10 + F9)));
      
      // Number of operations: 102
      I[71] = W4[ip]*(F15*G[50] + F16*G[129] + F17*G[102] + F18*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F19*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F20*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)) + F21*(F11*G[52] + F14*G[54] + F8*G[56] + G[53]*(F12 + F13) + G[55]*(F6 + F7) + G[57]*(F10 + F9)) + F22*(F11*G[123] + F14*G[125] + F8*G[127] + G[124]*(F12 + F13) + G[126]*(F6 + F7) + G[128]*(F10 + F9)) + F23*(F11*G[96] + F14*G[98] + F8*G[100] + G[101]*(F10 + F9) + G[97]*(F12 + F13) + G[99]*(F6 + F7)));
      
      // Number of operations: 15
      I[72] = W4[ip]*(F11*G[160] + F14*G[162] + F8*G[164] + G[159]*(F10 + F9) + G[161]*(F12 + F13) + G[163]*(F6 + F7));
      
      // Number of operations: 15
      I[73] = W4[ip]*(F11*G[166] + F14*G[168] + F8*G[170] + G[165]*(F10 + F9) + G[167]*(F12 + F13) + G[169]*(F6 + F7));
      
      // Number of operations: 15
      I[74] = W4[ip]*(F11*G[172] + F14*G[174] + F8*G[176] + G[171]*(F10 + F9) + G[173]*(F12 + F13) + G[175]*(F6 + F7));
      
      // Number of operations: 10
      I[75] = W4[ip]*(G[177] + G[161]*(F26 + F29) + G[167]*(F25 + F28) + G[173]*(F24 + F27));
      
      // Number of operations: 9
      I[76] = W4[ip]*(G[163]*(F26 + F29) + G[169]*(F25 + F28) + G[175]*(F24 + F27));
      
      // Number of operations: 9
      I[77] = W4[ip]*(G[159]*(F26 + F29) + G[165]*(F25 + F28) + G[171]*(F24 + F27));
      
      // Number of operations: 9
      I[78] = W4[ip]*(G[161]*(F2 + F5) + G[167]*(F1 + F4) + G[173]*(F0 + F3));
      
      // Number of operations: 10
      I[79] = W4[ip]*(G[177] + G[163]*(F2 + F5) + G[169]*(F1 + F4) + G[175]*(F0 + F3));
      
      // Number of operations: 9
      I[80] = W4[ip]*(G[159]*(F2 + F5) + G[165]*(F1 + F4) + G[171]*(F0 + F3));
      
      // Number of operations: 9
      I[81] = W4[ip]*(G[161]*(F20 + F23) + G[167]*(F19 + F22) + G[173]*(F18 + F21));
      
      // Number of operations: 9
      I[82] = W4[ip]*(G[163]*(F20 + F23) + G[169]*(F19 + F22) + G[175]*(F18 + F21));
      
      // Number of operations: 10
      I[83] = W4[ip]*(G[177] + G[159]*(F20 + F23) + G[165]*(F19 + F22) + G[171]*(F18 + F21));
      
      
      // Number of operations for primary indices: 648
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[45];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[46];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[47];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[48];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[49];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[50];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[51];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[52];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[53];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[54];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[55];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[56];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[57];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[58];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[59];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[60];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[61];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[62];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[63];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[64];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[65];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[66];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[67];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[68];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[69];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[70];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[71];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 216
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc12[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc13[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc14[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc4[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc5[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc6[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc10[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc8[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc9[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 432
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[75];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[76];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[77];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[78];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[79];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[80];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[81];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[82];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[83];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 972
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[35];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[39];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[42];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[44];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_exterior_facet_integral_0_0::nsemomentum3d_exterior_facet_integral_0_0() : ufc::exterior_facet_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_exterior_facet_integral_0_0::~nsemomentum3d_exterior_facet_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local exterior facet
void nsemomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c,
                                    unsigned int facet) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x[v0][1]*x[v1][2] + x[v0][2]*x[v2][1] + x[v1][1]*x[v2][2]) - (x[v2][1]*x[v1][2] + x[v2][2]*x[v0][1] + x[v1][1]*x[v0][2]);
    
    const double a1 = (x[v0][2]*x[v1][0] + x[v0][0]*x[v2][2] + x[v1][2]*x[v2][0]) - (x[v2][2]*x[v1][0] + x[v2][0]*x[v0][2] + x[v1][2]*x[v0][0]);
    
    const double a2 = (x[v0][0]*x[v1][1] + x[v0][1]*x[v2][0] + x[v1][0]*x[v2][1]) - (x[v2][0]*x[v1][1] + x[v2][1]*x[v0][0] + x[v1][0]*x[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE1_f0_C0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {8, 9, 10};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 3.
    double G[1];
    G[0] = 0.5*det*w[8][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc0[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc1[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc2[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc3[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc4[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc5[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc6[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc7[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc8[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc9[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc10[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc11[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F2*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F0*F0*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local exterior facet
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_cell_integral_1_0::nsemomentum3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_cell_integral_1_0::~nsemomentum3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Value of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[4][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 1357.
    double G[287];
    G[0] = 0.25*K_00*K_00*det*w[3][0]*w[5][0];
    G[1] = 0.25*K_00*K_10*det*w[3][0]*w[5][0];
    G[2] = 0.25*K_00*K_20*det*w[3][0]*w[5][0];
    G[3] = 0.125*K_00*K_00*det*w[3][0]*w[5][0];
    G[4] = 0.125*K_00*K_10*det*w[3][0]*w[5][0];
    G[5] = 0.125*K_00*K_20*det*w[3][0]*w[5][0];
    G[6] = -0.5*K_00*K_00*det*w[3][0]*w[5][0];
    G[7] = 0.5*K_00*K_01*det*w[3][0]*w[5][0];
    G[8] = 0.25*K_00*K_01*det*w[3][0]*w[5][0];
    G[9] = -0.5*K_00*K_01*det*w[3][0]*w[5][0];
    G[10] = 0.5*K_00*K_02*det*w[3][0]*w[5][0];
    G[11] = 0.25*K_00*K_02*det*w[3][0]*w[5][0];
    G[12] = -0.5*K_00*K_02*det*w[3][0]*w[5][0];
    G[13] = -0.5*K_00*K_10*det*w[3][0]*w[5][0];
    G[14] = 0.25*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[15] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[16] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[17] = 0.25*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[18] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[19] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[20] = -0.5*K_00*K_20*det*w[3][0]*w[5][0];
    G[21] = 0.25*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[22] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[23] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[24] = 0.25*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[25] = 0.125*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[26] = -0.25*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[27] = -0.125*K_00*K_00*det*w[3][0]*w[5][0];
    G[28] = -0.125*K_00*K_10*det*w[3][0]*w[5][0];
    G[29] = -0.125*K_00*K_20*det*w[3][0]*w[5][0];
    G[30] = -0.5*K_00*K_11*det*w[3][0]*w[5][0];
    G[31] = -0.5*K_00*K_21*det*w[3][0]*w[5][0];
    G[32] = 0.5*K_00*K_00*det*w[3][0]*w[5][0];
    G[33] = 0.5*K_00*K_10*det*w[3][0]*w[5][0];
    G[34] = 0.5*K_00*K_20*det*w[3][0]*w[5][0];
    G[35] = -0.25*K_00*K_01*det*w[3][0]*w[5][0];
    G[36] = -0.25*K_00*K_02*det*w[3][0]*w[5][0];
    G[37] = -0.125*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[38] = -0.125*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[39] = -0.125*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[40] = -0.125*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[41] = -0.5*K_01*K_10*det*w[3][0]*w[5][0];
    G[42] = -0.5*K_01*K_20*det*w[3][0]*w[5][0];
    G[43] = K_00*K_01*det*w[3][0]*w[5][0];
    G[44] = -0.5*K_01*K_01*det*w[3][0]*w[5][0];
    G[45] = K_01*K_01*det*w[3][0]*w[5][0];
    G[46] = -0.5*K_01*K_02*det*w[3][0]*w[5][0];
    G[47] = K_01*K_02*det*w[3][0]*w[5][0];
    G[48] = K_00*K_11*det*w[3][0]*w[5][0];
    G[49] = -0.5*K_01*K_11*det*w[3][0]*w[5][0];
    G[50] = K_01*K_11*det*w[3][0]*w[5][0];
    G[51] = -0.5*K_02*K_11*det*w[3][0]*w[5][0];
    G[52] = K_02*K_11*det*w[3][0]*w[5][0];
    G[53] = K_00*K_21*det*w[3][0]*w[5][0];
    G[54] = -0.5*K_01*K_21*det*w[3][0]*w[5][0];
    G[55] = K_01*K_21*det*w[3][0]*w[5][0];
    G[56] = -0.5*K_02*K_21*det*w[3][0]*w[5][0];
    G[57] = K_02*K_21*det*w[3][0]*w[5][0];
    G[58] = 0.25*K_01*K_01*det*w[3][0]*w[5][0];
    G[59] = 0.5*K_01*K_02*det*w[3][0]*w[5][0];
    G[60] = 0.25*K_01*K_02*det*w[3][0]*w[5][0];
    G[61] = 0.25*K_02*K_02*det*w[3][0]*w[5][0];
    G[62] = -0.5*K_02*K_02*det*w[3][0]*w[5][0];
    G[63] = 0.25*K_01*K_11*det*w[3][0]*w[5][0];
    G[64] = 0.25*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[65] = 0.125*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[66] = -0.25*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[67] = 0.25*K_02*K_12*det*w[3][0]*w[5][0];
    G[68] = -0.5*K_02*K_12*det*w[3][0]*w[5][0];
    G[69] =  - K_00*K_01*det*w[3][0]*w[5][0];
    G[70] =  - K_00*K_02*det*w[3][0]*w[5][0];
    G[71] = -0.5*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[72] = -0.5*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[73] = -0.5*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[74] = -0.5*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[75] = 0.25*K_01*K_21*det*w[3][0]*w[5][0];
    G[76] = 0.25*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[77] = 0.125*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[78] = -0.25*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[79] = 0.25*K_02*K_22*det*w[3][0]*w[5][0];
    G[80] = -0.5*K_02*K_22*det*w[3][0]*w[5][0];
    G[81] = 0.125*K_01*K_01*det*w[3][0]*w[5][0];
    G[82] = -0.5*det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[83] = -0.125*K_01*K_01*det*w[3][0]*w[5][0];
    G[84] = 0.5*K_01*K_01*det*w[3][0]*w[5][0];
    G[85] = -0.25*K_01*K_02*det*w[3][0]*w[5][0];
    G[86] =  - K_01*K_02*det*w[3][0]*w[5][0];
    G[87] = 0.125*K_02*K_02*det*w[3][0]*w[5][0];
    G[88] = -0.125*K_02*K_02*det*w[3][0]*w[5][0];
    G[89] = 0.5*K_02*K_02*det*w[3][0]*w[5][0];
    G[90] = 0.125*K_01*K_11*det*w[3][0]*w[5][0];
    G[91] = -0.5*det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[92] = -0.125*K_01*K_11*det*w[3][0]*w[5][0];
    G[93] = 0.5*K_01*K_11*det*w[3][0]*w[5][0];
    G[94] = -0.125*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[95] = -0.5*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[96] = 0.125*K_02*K_12*det*w[3][0]*w[5][0];
    G[97] = -0.125*K_02*K_12*det*w[3][0]*w[5][0];
    G[98] = 0.5*K_02*K_12*det*w[3][0]*w[5][0];
    G[99] = 0.125*K_01*K_21*det*w[3][0]*w[5][0];
    G[100] = -0.5*det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[101] = -0.125*K_01*K_21*det*w[3][0]*w[5][0];
    G[102] = 0.5*K_01*K_21*det*w[3][0]*w[5][0];
    G[103] = -0.125*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[104] = -0.5*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[105] = 0.125*K_02*K_22*det*w[3][0]*w[5][0];
    G[106] = -0.125*K_02*K_22*det*w[3][0]*w[5][0];
    G[107] = 0.5*K_02*K_22*det*w[3][0]*w[5][0];
    G[108] = -0.5*K_01*K_12*det*w[3][0]*w[5][0];
    G[109] = -0.5*K_01*K_22*det*w[3][0]*w[5][0];
    G[110] = 0.25*K_10*K_20*det*w[3][0]*w[5][0];
    G[111] = 0.25*K_20*K_20*det*w[3][0]*w[5][0];
    G[112] = 0.125*K_10*K_20*det*w[3][0]*w[5][0];
    G[113] = 0.125*K_20*K_20*det*w[3][0]*w[5][0];
    G[114] = -0.5*K_10*K_20*det*w[3][0]*w[5][0];
    G[115] = -0.5*K_20*K_20*det*w[3][0]*w[5][0];
    G[116] = 0.25*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[117] = 0.125*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[118] = -0.25*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[119] = 0.25*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[120] = 0.125*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[121] = -0.25*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[122] = 0.5*K_20*K_21*det*w[3][0]*w[5][0];
    G[123] = 0.25*K_20*K_21*det*w[3][0]*w[5][0];
    G[124] = -0.5*K_20*K_21*det*w[3][0]*w[5][0];
    G[125] = 0.5*K_20*K_22*det*w[3][0]*w[5][0];
    G[126] = 0.25*K_20*K_22*det*w[3][0]*w[5][0];
    G[127] = -0.5*K_20*K_22*det*w[3][0]*w[5][0];
    G[128] = -0.125*K_10*K_20*det*w[3][0]*w[5][0];
    G[129] = -0.125*K_20*K_20*det*w[3][0]*w[5][0];
    G[130] = -0.5*K_02*K_20*det*w[3][0]*w[5][0];
    G[131] = -0.5*K_12*K_20*det*w[3][0]*w[5][0];
    G[132] = 0.5*K_10*K_20*det*w[3][0]*w[5][0];
    G[133] = 0.5*K_20*K_20*det*w[3][0]*w[5][0];
    G[134] = -0.125*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[135] = -0.125*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[136] = -0.25*K_20*K_21*det*w[3][0]*w[5][0];
    G[137] = -0.25*K_20*K_22*det*w[3][0]*w[5][0];
    G[138] = -0.5*K_00*K_22*det*w[3][0]*w[5][0];
    G[139] = -0.5*K_10*K_22*det*w[3][0]*w[5][0];
    G[140] = K_02*K_20*det*w[3][0]*w[5][0];
    G[141] = K_02*K_22*det*w[3][0]*w[5][0];
    G[142] = K_12*K_20*det*w[3][0]*w[5][0];
    G[143] = -0.5*K_12*K_21*det*w[3][0]*w[5][0];
    G[144] = K_12*K_21*det*w[3][0]*w[5][0];
    G[145] = -0.5*K_12*K_22*det*w[3][0]*w[5][0];
    G[146] = K_12*K_22*det*w[3][0]*w[5][0];
    G[147] = K_20*K_22*det*w[3][0]*w[5][0];
    G[148] = -0.5*K_21*K_22*det*w[3][0]*w[5][0];
    G[149] = K_21*K_22*det*w[3][0]*w[5][0];
    G[150] = -0.5*K_22*K_22*det*w[3][0]*w[5][0];
    G[151] = K_22*K_22*det*w[3][0]*w[5][0];
    G[152] = -0.5*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[153] = -0.5*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[154] =  - K_20*K_21*det*w[3][0]*w[5][0];
    G[155] =  - K_20*K_22*det*w[3][0]*w[5][0];
    G[156] = -0.5*K_11*K_22*det*w[3][0]*w[5][0];
    G[157] = 0.25*K_11*K_21*det*w[3][0]*w[5][0];
    G[158] = -0.5*K_11*K_21*det*w[3][0]*w[5][0];
    G[159] = 0.25*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[160] = 0.125*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[161] = -0.25*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[162] = 0.25*K_12*K_22*det*w[3][0]*w[5][0];
    G[163] = 0.25*K_21*K_21*det*w[3][0]*w[5][0];
    G[164] = -0.5*K_21*K_21*det*w[3][0]*w[5][0];
    G[165] = 0.5*K_21*K_22*det*w[3][0]*w[5][0];
    G[166] = 0.25*K_21*K_22*det*w[3][0]*w[5][0];
    G[167] = 0.25*K_22*K_22*det*w[3][0]*w[5][0];
    G[168] = 0.125*K_11*K_21*det*w[3][0]*w[5][0];
    G[169] = -0.5*det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[170] = -0.125*K_11*K_21*det*w[3][0]*w[5][0];
    G[171] = 0.5*K_11*K_21*det*w[3][0]*w[5][0];
    G[172] = -0.125*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[173] = -0.5*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[174] = 0.125*K_12*K_22*det*w[3][0]*w[5][0];
    G[175] = -0.125*K_12*K_22*det*w[3][0]*w[5][0];
    G[176] = 0.5*K_12*K_22*det*w[3][0]*w[5][0];
    G[177] = 0.125*K_21*K_21*det*w[3][0]*w[5][0];
    G[178] = -0.5*det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[179] = -0.125*K_21*K_21*det*w[3][0]*w[5][0];
    G[180] = 0.5*K_21*K_21*det*w[3][0]*w[5][0];
    G[181] = -0.25*K_21*K_22*det*w[3][0]*w[5][0];
    G[182] =  - K_21*K_22*det*w[3][0]*w[5][0];
    G[183] = 0.125*K_22*K_22*det*w[3][0]*w[5][0];
    G[184] = -0.125*K_22*K_22*det*w[3][0]*w[5][0];
    G[185] = 0.5*K_22*K_22*det*w[3][0]*w[5][0];
    G[186] = 0.25*K_10*K_10*det*w[3][0]*w[5][0];
    G[187] = 0.125*K_10*K_10*det*w[3][0]*w[5][0];
    G[188] = -0.5*K_10*K_10*det*w[3][0]*w[5][0];
    G[189] = 0.5*K_10*K_11*det*w[3][0]*w[5][0];
    G[190] = 0.25*K_10*K_11*det*w[3][0]*w[5][0];
    G[191] = -0.5*K_10*K_11*det*w[3][0]*w[5][0];
    G[192] = 0.5*K_10*K_12*det*w[3][0]*w[5][0];
    G[193] = 0.25*K_10*K_12*det*w[3][0]*w[5][0];
    G[194] = -0.5*K_10*K_12*det*w[3][0]*w[5][0];
    G[195] = -0.125*K_10*K_10*det*w[3][0]*w[5][0];
    G[196] = -0.5*K_02*K_10*det*w[3][0]*w[5][0];
    G[197] = 0.5*K_10*K_10*det*w[3][0]*w[5][0];
    G[198] = -0.25*K_10*K_11*det*w[3][0]*w[5][0];
    G[199] = -0.25*K_10*K_12*det*w[3][0]*w[5][0];
    G[200] = -0.5*K_00*K_12*det*w[3][0]*w[5][0];
    G[201] = K_02*K_10*det*w[3][0]*w[5][0];
    G[202] = K_02*K_12*det*w[3][0]*w[5][0];
    G[203] = K_10*K_12*det*w[3][0]*w[5][0];
    G[204] = -0.5*K_11*K_12*det*w[3][0]*w[5][0];
    G[205] = K_11*K_12*det*w[3][0]*w[5][0];
    G[206] = -0.5*K_12*K_12*det*w[3][0]*w[5][0];
    G[207] = K_12*K_12*det*w[3][0]*w[5][0];
    G[208] = K_10*K_22*det*w[3][0]*w[5][0];
    G[209] = K_11*K_22*det*w[3][0]*w[5][0];
    G[210] =  - K_10*K_11*det*w[3][0]*w[5][0];
    G[211] =  - K_10*K_12*det*w[3][0]*w[5][0];
    G[212] = 0.25*K_11*K_11*det*w[3][0]*w[5][0];
    G[213] = -0.5*K_11*K_11*det*w[3][0]*w[5][0];
    G[214] = 0.5*K_11*K_12*det*w[3][0]*w[5][0];
    G[215] = 0.25*K_11*K_12*det*w[3][0]*w[5][0];
    G[216] = 0.25*K_12*K_12*det*w[3][0]*w[5][0];
    G[217] = 0.125*K_11*K_11*det*w[3][0]*w[5][0];
    G[218] = -0.5*det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[219] = -0.125*K_11*K_11*det*w[3][0]*w[5][0];
    G[220] = 0.5*K_11*K_11*det*w[3][0]*w[5][0];
    G[221] = -0.25*K_11*K_12*det*w[3][0]*w[5][0];
    G[222] =  - K_11*K_12*det*w[3][0]*w[5][0];
    G[223] = 0.125*K_12*K_12*det*w[3][0]*w[5][0];
    G[224] = -0.125*K_12*K_12*det*w[3][0]*w[5][0];
    G[225] = 0.5*K_12*K_12*det*w[3][0]*w[5][0];
    G[226] = K_00*K_02*det*w[3][0]*w[5][0];
    G[227] = K_02*K_02*det*w[3][0]*w[5][0];
    G[228] = K_00*K_12*det*w[3][0]*w[5][0];
    G[229] = K_01*K_12*det*w[3][0]*w[5][0];
    G[230] = K_00*K_22*det*w[3][0]*w[5][0];
    G[231] = K_01*K_22*det*w[3][0]*w[5][0];
    G[232] = K_00*K_20*det*w[3][0]*w[5][0];
    G[233] = K_10*K_20*det*w[3][0]*w[5][0];
    G[234] = -0.5*K_10*K_21*det*w[3][0]*w[5][0];
    G[235] = K_10*K_21*det*w[3][0]*w[5][0];
    G[236] = K_20*K_20*det*w[3][0]*w[5][0];
    G[237] = K_20*K_21*det*w[3][0]*w[5][0];
    G[238] = -0.5*K_11*K_20*det*w[3][0]*w[5][0];
    G[239] = K_00*K_10*det*w[3][0]*w[5][0];
    G[240] = K_10*K_10*det*w[3][0]*w[5][0];
    G[241] = K_10*K_11*det*w[3][0]*w[5][0];
    G[242] = K_11*K_20*det*w[3][0]*w[5][0];
    G[243] = K_00*K_00*det*w[3][0]*w[5][0];
    G[244] = K_01*K_10*det*w[3][0]*w[5][0];
    G[245] = K_01*K_20*det*w[3][0]*w[5][0];
    G[246] = K_11*K_21*det*w[3][0]*w[5][0];
    G[247] = K_21*K_21*det*w[3][0]*w[5][0];
    G[248] = K_11*K_11*det*w[3][0]*w[5][0];
    G[249] = 0.25*K_00*det;
    G[250] = 0.25*K_10*det;
    G[251] = 0.25*K_20*det;
    G[252] = -0.25*K_00*det;
    G[253] = -0.25*K_10*det;
    G[254] = -0.25*K_20*det;
    G[255] =  - K_02*det;
    G[256] =  - K_12*det;
    G[257] =  - K_22*det;
    G[258] = 0.5*K_00*det;
    G[259] = 0.5*K_10*det;
    G[260] = 0.5*K_20*det;
    G[261] = 0.25*K_01*det;
    G[262] = 0.25*K_02*det;
    G[263] = 0.25*K_11*det;
    G[264] = 0.25*K_12*det;
    G[265] = 0.25*K_21*det;
    G[266] = 0.25*K_22*det;
    G[267] = -0.25*K_01*det;
    G[268] = 0.5*K_01*det;
    G[269] = -0.25*K_02*det;
    G[270] = 0.5*K_02*det;
    G[271] = -0.25*K_11*det;
    G[272] = 0.5*K_11*det;
    G[273] = -0.25*K_12*det;
    G[274] = 0.5*K_12*det;
    G[275] = -0.25*K_21*det;
    G[276] = 0.5*K_21*det;
    G[277] = -0.25*K_22*det;
    G[278] = 0.5*K_22*det;
    G[279] = 0.0;
    G[280] = det/w[4][0];
    G[281] =  - K_00*det;
    G[282] =  - K_10*det;
    G[283] =  - K_20*det;
    G[284] =  - K_01*det;
    G[285] =  - K_11*det;
    G[286] =  - K_21*det;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 16232
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      
      // Total number of operations to compute function values = 84
      for (unsigned int r = 0; r < 2; r++)
      {
        F9 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F10 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F11 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F12 += FE0_D001[ip][r]*w[6][nzc6[r]];
        F13 += FE0_D001[ip][r]*w[6][nzc5[r]];
        F14 += FE0_D001[ip][r]*w[6][nzc4[r]];
        F15 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F16 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F17 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F18 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F19 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F21 += FE0_D001[ip][r]*w[6][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[6][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[6][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F25 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F26 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F27 += FE0_D001[ip][r]*w[6][nzc14[r]];
        F28 += FE0_D001[ip][r]*w[6][nzc13[r]];
        F29 += FE0_D001[ip][r]*w[6][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 80
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc3[r]];
        F1 += FE0[ip][r]*w[6][nzc3[r]];
        F2 += FE0[ip][r]*w[9][nzc3[r]];
        F3 += FE0[ip][r]*w[0][nzc7[r]];
        F4 += FE0[ip][r]*w[6][nzc7[r]];
        F5 += FE0[ip][r]*w[9][nzc7[r]];
        F6 += FE0[ip][r]*w[0][nzc11[r]];
        F7 += FE0[ip][r]*w[6][nzc11[r]];
        F8 += FE0[ip][r]*w[9][nzc11[r]];
        F30 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 3834
      double I[12];
      // Number of operations: 403
      I[0] = W4[ip]*(F0*F0*(F18*G[0] + F19*G[1] + F20*G[2] + F21*G[3] + F22*G[4] + F23*G[5]) + F1*(F0*(F18*G[0] + F19*G[1] + F20*G[2]) + F1*(F21*G[27] + F22*G[28] + F23*G[29]) + F15*G[9] + F16*G[30] + F17*G[31]) + F12*G[9] + F13*G[41] + F14*G[42] + F2*(F0*(F18*G[6] + F19*G[13] + F20*G[20]) + F1*(F21*G[32] + F22*G[33] + F23*G[34]) + F15*G[43] + F16*G[48] + F17*G[53] + F2*(F21*G[6] + F22*G[13] + F23*G[20])) + F21*G[44] + F22*G[49] + F23*G[54] + F27*G[46] + F28*G[108] + F29*G[109] + F3*(F0*(F21*G[8] + F22*G[15] + F23*G[22]) + F18*(F0*G[7] + F1*G[8] + F2*G[9] + F5*G[44] + F7*G[60] + F8*G[46] + G[58]*(F3 + F4)) + F19*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4)) + F20*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4)) + F3*(F21*G[81] + F22*G[90] + F23*G[99])) + F30*(F21*G[82] + F22*G[91] + F23*G[100]) + F4*(F0*(F18*G[8] + F19*G[15] + F20*G[22]) + F1*(F21*G[35] + F22*G[37] + F23*G[39]) + F15*G[44] + F16*G[49] + F17*G[54] + F2*(F21*G[7] + F22*G[14] + F23*G[21]) + F4*(F21*G[83] + F22*G[92] + F23*G[101])) + F5*(F0*(F18*G[9] + F19*G[16] + F20*G[23]) + F15*G[45] + F16*G[50] + F17*G[55] + F21*(F1*G[7] + F2*G[69] + F4*G[84] + F5*G[44]) + F22*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F23*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54])) + F6*(F0*(F21*G[11] + F22*G[18] + F23*G[25]) + F18*(F0*G[10] + F1*G[11] + F2*G[12] + F3*G[59] + F4*G[60] + F5*G[46] + F8*G[62] + G[61]*(F6 + F7)) + F19*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7)) + F20*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7)) + F3*(F21*G[60] + F22*G[65] + F23*G[77]) + F6*(F21*G[87] + F22*G[96] + F23*G[105])) + F7*(F0*(F18*G[11] + F19*G[18] + F20*G[25]) + F15*G[46] + F16*G[51] + F17*G[56] + F21*(F1*G[36] + F2*G[10] + F4*G[85] + F5*G[59] + F7*G[88]) + F22*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F23*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106])) + F8*(F0*(F18*G[12] + F19*G[19] + F20*G[26]) + F15*G[47] + F16*G[52] + F17*G[57] + F21*(F1*G[10] + F2*G[70] + F4*G[59] + F5*G[86] + F7*G[89] + F8*G[62]) + F22*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F23*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80])));
      
      // Number of operations: 403
      I[1] = W4[ip]*(F0*F0*(F24*G[2] + F25*G[110] + F26*G[111] + F27*G[5] + F28*G[112] + F29*G[113]) + F1*(F0*(F24*G[2] + F25*G[110] + F26*G[111]) + F1*(F27*G[29] + F28*G[128] + F29*G[129]) + F15*G[130] + F16*G[131] + F17*G[127]) + F12*G[138] + F13*G[139] + F14*G[127] + F2*(F0*(F24*G[20] + F25*G[114] + F26*G[115]) + F1*(F27*G[34] + F28*G[132] + F29*G[133]) + F15*G[140] + F16*G[142] + F17*G[147] + F2*(F27*G[20] + F28*G[114] + F29*G[115])) + F21*G[109] + F22*G[156] + F23*G[148] + F27*G[80] + F28*G[145] + F29*G[150] + F3*(F0*(F27*G[22] + F28*G[117] + F29*G[123]) + F24*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4)) + F25*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F26*(F0*G[122] + F1*G[123] + F2*G[124] + F5*G[164] + F7*G[166] + F8*G[148] + G[163]*(F3 + F4)) + F3*(F27*G[99] + F28*G[168] + F29*G[177])) + F30*(F27*G[100] + F28*G[169] + F29*G[178]) + F4*(F0*(F24*G[22] + F25*G[117] + F26*G[123]) + F1*(F27*G[39] + F28*G[134] + F29*G[136]) + F15*G[56] + F16*G[143] + F17*G[148] + F2*(F27*G[21] + F28*G[116] + F29*G[122]) + F4*(F27*G[101] + F28*G[170] + F29*G[179])) + F5*(F0*(F24*G[23] + F25*G[118] + F26*G[124]) + F15*G[57] + F16*G[144] + F17*G[149] + F27*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54]) + F28*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158]) + F29*(F1*G[122] + F2*G[154] + F4*G[180] + F5*G[164])) + F6*(F0*(F27*G[25] + F28*G[120] + F29*G[126]) + F24*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7)) + F25*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F26*(F0*G[125] + F1*G[126] + F2*G[127] + F3*G[165] + F4*G[166] + F5*G[148] + F8*G[150] + G[167]*(F6 + F7)) + F3*(F27*G[77] + F28*G[160] + F29*G[166]) + F6*(F27*G[105] + F28*G[174] + F29*G[183])) + F7*(F0*(F24*G[25] + F25*G[120] + F26*G[126]) + F15*G[80] + F16*G[145] + F17*G[150] + F27*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106]) + F28*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175]) + F29*(F1*G[137] + F2*G[125] + F4*G[181] + F5*G[165] + F7*G[184])) + F8*(F0*(F24*G[26] + F25*G[121] + F26*G[127]) + F15*G[141] + F16*G[146] + F17*G[151] + F27*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80]) + F28*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145]) + F29*(F1*G[125] + F2*G[155] + F4*G[165] + F5*G[182] + F7*G[185] + F8*G[150])));
      
      // Number of operations: 403
      I[2] = W4[ip]*(F0*F0*(F24*G[1] + F25*G[186] + F26*G[110] + F27*G[4] + F28*G[187] + F29*G[112]) + F1*(F0*(F24*G[1] + F25*G[186] + F26*G[110]) + F1*(F27*G[28] + F28*G[195] + F29*G[128]) + F15*G[196] + F16*G[194] + F17*G[139]) + F12*G[200] + F13*G[194] + F14*G[131] + F2*(F0*(F24*G[13] + F25*G[188] + F26*G[114]) + F1*(F27*G[33] + F28*G[197] + F29*G[132]) + F15*G[201] + F16*G[203] + F17*G[208] + F2*(F27*G[13] + F28*G[188] + F29*G[114])) + F21*G[108] + F22*G[204] + F23*G[143] + F27*G[68] + F28*G[206] + F29*G[145] + F3*(F0*(F27*G[15] + F28*G[190] + F29*G[117]) + F24*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4)) + F25*(F0*G[189] + F1*G[190] + F2*G[191] + F5*G[213] + F7*G[215] + F8*G[204] + G[212]*(F3 + F4)) + F26*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F3*(F27*G[90] + F28*G[217] + F29*G[168])) + F30*(F27*G[91] + F28*G[218] + F29*G[169]) + F4*(F0*(F24*G[15] + F25*G[190] + F26*G[117]) + F1*(F27*G[37] + F28*G[198] + F29*G[134]) + F15*G[51] + F16*G[204] + F17*G[156] + F2*(F27*G[14] + F28*G[189] + F29*G[116]) + F4*(F27*G[92] + F28*G[219] + F29*G[170])) + F5*(F0*(F24*G[16] + F25*G[191] + F26*G[118]) + F15*G[52] + F16*G[205] + F17*G[209] + F27*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F28*(F1*G[189] + F2*G[210] + F4*G[220] + F5*G[213]) + F29*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158])) + F6*(F0*(F27*G[18] + F28*G[193] + F29*G[120]) + F24*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7)) + F25*(F0*G[192] + F1*G[193] + F2*G[194] + F3*G[214] + F4*G[215] + F5*G[204] + F8*G[206] + G[216]*(F6 + F7)) + F26*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F3*(F27*G[65] + F28*G[215] + F29*G[160]) + F6*(F27*G[96] + F28*G[223] + F29*G[174])) + F7*(F0*(F24*G[18] + F25*G[193] + F26*G[120]) + F15*G[68] + F16*G[206] + F17*G[145] + F27*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F28*(F1*G[199] + F2*G[192] + F4*G[221] + F5*G[214] + F7*G[224]) + F29*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175])) + F8*(F0*(F24*G[19] + F25*G[194] + F26*G[121]) + F15*G[202] + F16*G[207] + F17*G[146] + F27*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F28*(F1*G[192] + F2*G[211] + F4*G[214] + F5*G[222] + F7*G[225] + F8*G[206]) + F29*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145])));
      
      // Number of operations: 403
      I[3] = W4[ip]*(F0*F0*(F24*G[0] + F25*G[1] + F26*G[2] + F27*G[3] + F28*G[4] + F29*G[5]) + F1*(F0*(F24*G[0] + F25*G[1] + F26*G[2]) + F1*(F27*G[27] + F28*G[28] + F29*G[29]) + F15*G[12] + F16*G[200] + F17*G[138]) + F12*G[12] + F13*G[196] + F14*G[130] + F2*(F0*(F24*G[6] + F25*G[13] + F26*G[20]) + F1*(F27*G[32] + F28*G[33] + F29*G[34]) + F15*G[226] + F16*G[228] + F17*G[230] + F2*(F27*G[6] + F28*G[13] + F29*G[20])) + F21*G[46] + F22*G[51] + F23*G[56] + F27*G[62] + F28*G[68] + F29*G[80] + F3*(F0*(F27*G[8] + F28*G[15] + F29*G[22]) + F24*(F0*G[7] + F1*G[8] + F2*G[9] + F5*G[44] + F7*G[60] + F8*G[46] + G[58]*(F3 + F4)) + F25*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4)) + F26*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4)) + F3*(F27*G[81] + F28*G[90] + F29*G[99])) + F30*(F27*G[82] + F28*G[91] + F29*G[100]) + F4*(F0*(F24*G[8] + F25*G[15] + F26*G[22]) + F1*(F27*G[35] + F28*G[37] + F29*G[39]) + F15*G[46] + F16*G[108] + F17*G[109] + F2*(F27*G[7] + F28*G[14] + F29*G[21]) + F4*(F27*G[83] + F28*G[92] + F29*G[101])) + F5*(F0*(F24*G[9] + F25*G[16] + F26*G[23]) + F15*G[47] + F16*G[229] + F17*G[231] + F27*(F1*G[7] + F2*G[69] + F4*G[84] + F5*G[44]) + F28*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F29*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54])) + F6*(F0*(F27*G[11] + F28*G[18] + F29*G[25]) + F24*(F0*G[10] + F1*G[11] + F2*G[12] + F3*G[59] + F4*G[60] + F5*G[46] + F8*G[62] + G[61]*(F6 + F7)) + F25*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7)) + F26*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7)) + F3*(F27*G[60] + F28*G[65] + F29*G[77]) + F6*(F27*G[87] + F28*G[96] + F29*G[105])) + F7*(F0*(F24*G[11] + F25*G[18] + F26*G[25]) + F15*G[62] + F16*G[68] + F17*G[80] + F27*(F1*G[36] + F2*G[10] + F4*G[85] + F5*G[59] + F7*G[88]) + F28*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F29*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106])) + F8*(F0*(F24*G[12] + F25*G[19] + F26*G[26]) + F15*G[227] + F16*G[202] + F17*G[141] + F27*(F1*G[10] + F2*G[70] + F4*G[59] + F5*G[86] + F7*G[89] + F8*G[62]) + F28*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F29*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80])));
      
      // Number of operations: 403
      I[4] = W4[ip]*(F0*F0*(F10*G[110] + F11*G[111] + F12*G[5] + F13*G[112] + F14*G[113] + F9*G[2]) + F1*(F0*(F10*G[110] + F11*G[111] + F9*G[2]) + F1*(F12*G[29] + F13*G[128] + F14*G[129]) + F15*G[20] + F16*G[114] + F17*G[115]) + F12*G[20] + F13*G[114] + F14*G[115] + F2*(F0*(F10*G[114] + F11*G[115] + F9*G[20]) + F1*(F12*G[34] + F13*G[132] + F14*G[133]) + F15*G[232] + F16*G[233] + F17*G[236] + F2*(F12*G[20] + F13*G[114] + F14*G[115])) + F21*G[42] + F22*G[238] + F23*G[124] + F27*G[130] + F28*G[131] + F29*G[127] + F3*(F0*(F12*G[22] + F13*G[117] + F14*G[123]) + F10*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F11*(F0*G[122] + F1*G[123] + F2*G[124] + F5*G[164] + F7*G[166] + F8*G[148] + G[163]*(F3 + F4)) + F3*(F12*G[99] + F13*G[168] + F14*G[177]) + F9*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4))) + F30*(F12*G[100] + F13*G[169] + F14*G[178]) + F4*(F0*(F10*G[117] + F11*G[123] + F9*G[22]) + F1*(F12*G[39] + F13*G[134] + F14*G[136]) + F15*G[31] + F16*G[234] + F17*G[124] + F2*(F12*G[21] + F13*G[116] + F14*G[122]) + F4*(F12*G[101] + F13*G[170] + F14*G[179])) + F5*(F0*(F10*G[118] + F11*G[124] + F9*G[23]) + F12*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54]) + F13*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158]) + F14*(F1*G[122] + F2*G[154] + F4*G[180] + F5*G[164]) + F15*G[53] + F16*G[235] + F17*G[237]) + F6*(F0*(F12*G[25] + F13*G[120] + F14*G[126]) + F10*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F11*(F0*G[125] + F1*G[126] + F2*G[127] + F3*G[165] + F4*G[166] + F5*G[148] + F8*G[150] + G[167]*(F6 + F7)) + F3*(F12*G[77] + F13*G[160] + F14*G[166]) + F6*(F12*G[105] + F13*G[174] + F14*G[183]) + F9*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7))) + F7*(F0*(F10*G[120] + F11*G[126] + F9*G[25]) + F12*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106]) + F13*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175]) + F14*(F1*G[137] + F2*G[125] + F4*G[181] + F5*G[165] + F7*G[184]) + F15*G[138] + F16*G[139] + F17*G[127]) + F8*(F0*(F10*G[121] + F11*G[127] + F9*G[26]) + F12*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80]) + F13*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145]) + F14*(F1*G[125] + F2*G[155] + F4*G[165] + F5*G[182] + F7*G[185] + F8*G[150]) + F15*G[230] + F16*G[208] + F17*G[147]));
      
      // Number of operations: 403
      I[5] = W4[ip]*(F0*F0*(F10*G[186] + F11*G[110] + F12*G[4] + F13*G[187] + F14*G[112] + F9*G[1]) + F1*(F0*(F10*G[186] + F11*G[110] + F9*G[1]) + F1*(F12*G[28] + F13*G[195] + F14*G[128]) + F15*G[13] + F16*G[188] + F17*G[114]) + F12*G[13] + F13*G[188] + F14*G[114] + F2*(F0*(F10*G[188] + F11*G[114] + F9*G[13]) + F1*(F12*G[33] + F13*G[197] + F14*G[132]) + F15*G[239] + F16*G[240] + F17*G[233] + F2*(F12*G[13] + F13*G[188] + F14*G[114])) + F21*G[41] + F22*G[191] + F23*G[234] + F27*G[196] + F28*G[194] + F29*G[139] + F3*(F0*(F12*G[15] + F13*G[190] + F14*G[117]) + F10*(F0*G[189] + F1*G[190] + F2*G[191] + F5*G[213] + F7*G[215] + F8*G[204] + G[212]*(F3 + F4)) + F11*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F3*(F12*G[90] + F13*G[217] + F14*G[168]) + F9*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4))) + F30*(F12*G[91] + F13*G[218] + F14*G[169]) + F4*(F0*(F10*G[190] + F11*G[117] + F9*G[15]) + F1*(F12*G[37] + F13*G[198] + F14*G[134]) + F15*G[30] + F16*G[191] + F17*G[238] + F2*(F12*G[14] + F13*G[189] + F14*G[116]) + F4*(F12*G[92] + F13*G[219] + F14*G[170])) + F5*(F0*(F10*G[191] + F11*G[118] + F9*G[16]) + F12*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F13*(F1*G[189] + F2*G[210] + F4*G[220] + F5*G[213]) + F14*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158]) + F15*G[48] + F16*G[241] + F17*G[242]) + F6*(F0*(F12*G[18] + F13*G[193] + F14*G[120]) + F10*(F0*G[192] + F1*G[193] + F2*G[194] + F3*G[214] + F4*G[215] + F5*G[204] + F8*G[206] + G[216]*(F6 + F7)) + F11*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F3*(F12*G[65] + F13*G[215] + F14*G[160]) + F6*(F12*G[96] + F13*G[223] + F14*G[174]) + F9*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7))) + F7*(F0*(F10*G[193] + F11*G[120] + F9*G[18]) + F12*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F13*(F1*G[199] + F2*G[192] + F4*G[221] + F5*G[214] + F7*G[224]) + F14*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175]) + F15*G[200] + F16*G[194] + F17*G[131]) + F8*(F0*(F10*G[194] + F11*G[121] + F9*G[19]) + F12*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F13*(F1*G[192] + F2*G[211] + F4*G[214] + F5*G[222] + F7*G[225] + F8*G[206]) + F14*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145]) + F15*G[228] + F16*G[203] + F17*G[142]));
      
      // Number of operations: 403
      I[6] = W4[ip]*(F0*F0*(F10*G[1] + F11*G[2] + F12*G[3] + F13*G[4] + F14*G[5] + F9*G[0]) + F1*(F0*(F10*G[1] + F11*G[2] + F9*G[0]) + F1*(F12*G[27] + F13*G[28] + F14*G[29]) + F15*G[6] + F16*G[13] + F17*G[20]) + F12*G[6] + F13*G[13] + F14*G[20] + F2*(F0*(F10*G[13] + F11*G[20] + F9*G[6]) + F1*(F12*G[32] + F13*G[33] + F14*G[34]) + F15*G[243] + F16*G[239] + F17*G[232] + F2*(F12*G[6] + F13*G[13] + F14*G[20])) + F21*G[9] + F22*G[30] + F23*G[31] + F27*G[12] + F28*G[200] + F29*G[138] + F3*(F0*(F12*G[8] + F13*G[15] + F14*G[22]) + F10*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4)) + F11*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4)) + F3*(F12*G[81] + F13*G[90] + F14*G[99]) + F9*(F0*G[7] + F1*G[8] + F2*G[9] + F5*G[44] + F7*G[60] + F8*G[46] + G[58]*(F3 + F4))) + F30*(F12*G[82] + F13*G[91] + F14*G[100]) + F4*(F0*(F10*G[15] + F11*G[22] + F9*G[8]) + F1*(F12*G[35] + F13*G[37] + F14*G[39]) + F15*G[9] + F16*G[41] + F17*G[42] + F2*(F12*G[7] + F13*G[14] + F14*G[21]) + F4*(F12*G[83] + F13*G[92] + F14*G[101])) + F5*(F0*(F10*G[16] + F11*G[23] + F9*G[9]) + F12*(F1*G[7] + F2*G[69] + F4*G[84] + F5*G[44]) + F13*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F14*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54]) + F15*G[43] + F16*G[244] + F17*G[245]) + F6*(F0*(F12*G[11] + F13*G[18] + F14*G[25]) + F10*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7)) + F11*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7)) + F3*(F12*G[60] + F13*G[65] + F14*G[77]) + F6*(F12*G[87] + F13*G[96] + F14*G[105]) + F9*(F0*G[10] + F1*G[11] + F2*G[12] + F3*G[59] + F4*G[60] + F5*G[46] + F8*G[62] + G[61]*(F6 + F7))) + F7*(F0*(F10*G[18] + F11*G[25] + F9*G[11]) + F12*(F1*G[36] + F2*G[10] + F4*G[85] + F5*G[59] + F7*G[88]) + F13*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F14*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106]) + F15*G[12] + F16*G[196] + F17*G[130]) + F8*(F0*(F10*G[19] + F11*G[26] + F9*G[12]) + F12*(F1*G[10] + F2*G[70] + F4*G[59] + F5*G[86] + F7*G[89] + F8*G[62]) + F13*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F14*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80]) + F15*G[226] + F16*G[201] + F17*G[140]));
      
      // Number of operations: 403
      I[7] = W4[ip]*(F0*F0*(F18*G[2] + F19*G[110] + F20*G[111] + F21*G[5] + F22*G[112] + F23*G[113]) + F1*(F0*(F18*G[2] + F19*G[110] + F20*G[111]) + F1*(F21*G[29] + F22*G[128] + F23*G[129]) + F15*G[42] + F16*G[238] + F17*G[124]) + F12*G[31] + F13*G[234] + F14*G[124] + F2*(F0*(F18*G[20] + F19*G[114] + F20*G[115]) + F1*(F21*G[34] + F22*G[132] + F23*G[133]) + F15*G[245] + F16*G[242] + F17*G[237] + F2*(F21*G[20] + F22*G[114] + F23*G[115])) + F21*G[54] + F22*G[158] + F23*G[164] + F27*G[56] + F28*G[143] + F29*G[148] + F3*(F0*(F21*G[22] + F22*G[117] + F23*G[123]) + F18*(F0*G[21] + F1*G[22] + F2*G[23] + F5*G[54] + F7*G[77] + F8*G[78] + G[75]*(F3 + F4)) + F19*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F20*(F0*G[122] + F1*G[123] + F2*G[124] + F5*G[164] + F7*G[166] + F8*G[148] + G[163]*(F3 + F4)) + F3*(F21*G[99] + F22*G[168] + F23*G[177])) + F30*(F21*G[100] + F22*G[169] + F23*G[178]) + F4*(F0*(F18*G[22] + F19*G[117] + F20*G[123]) + F1*(F21*G[39] + F22*G[134] + F23*G[136]) + F15*G[54] + F16*G[158] + F17*G[164] + F2*(F21*G[21] + F22*G[116] + F23*G[122]) + F4*(F21*G[101] + F22*G[170] + F23*G[179])) + F5*(F0*(F18*G[23] + F19*G[118] + F20*G[124]) + F15*G[55] + F16*G[246] + F17*G[247] + F21*(F1*G[21] + F2*G[73] + F4*G[102] + F5*G[54]) + F22*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158]) + F23*(F1*G[122] + F2*G[154] + F4*G[180] + F5*G[164])) + F6*(F0*(F21*G[25] + F22*G[120] + F23*G[126]) + F18*(F0*G[24] + F1*G[25] + F2*G[26] + F3*G[76] + F4*G[77] + F5*G[78] + F8*G[80] + G[79]*(F6 + F7)) + F19*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F20*(F0*G[125] + F1*G[126] + F2*G[127] + F3*G[165] + F4*G[166] + F5*G[148] + F8*G[150] + G[167]*(F6 + F7)) + F3*(F21*G[77] + F22*G[160] + F23*G[166]) + F6*(F21*G[105] + F22*G[174] + F23*G[183])) + F7*(F0*(F18*G[25] + F19*G[120] + F20*G[126]) + F15*G[109] + F16*G[156] + F17*G[148] + F21*(F1*G[40] + F2*G[24] + F4*G[103] + F5*G[76] + F7*G[106]) + F22*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175]) + F23*(F1*G[137] + F2*G[125] + F4*G[181] + F5*G[165] + F7*G[184])) + F8*(F0*(F18*G[26] + F19*G[121] + F20*G[127]) + F15*G[231] + F16*G[209] + F17*G[149] + F21*(F1*G[24] + F2*G[74] + F4*G[76] + F5*G[104] + F7*G[107] + F8*G[80]) + F22*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145]) + F23*(F1*G[125] + F2*G[155] + F4*G[165] + F5*G[182] + F7*G[185] + F8*G[150])));
      
      // Number of operations: 403
      I[8] = W4[ip]*(F0*F0*(F18*G[1] + F19*G[186] + F20*G[110] + F21*G[4] + F22*G[187] + F23*G[112]) + F1*(F0*(F18*G[1] + F19*G[186] + F20*G[110]) + F1*(F21*G[28] + F22*G[195] + F23*G[128]) + F15*G[41] + F16*G[191] + F17*G[234]) + F12*G[30] + F13*G[191] + F14*G[238] + F2*(F0*(F18*G[13] + F19*G[188] + F20*G[114]) + F1*(F21*G[33] + F22*G[197] + F23*G[132]) + F15*G[244] + F16*G[241] + F17*G[235] + F2*(F21*G[13] + F22*G[188] + F23*G[114])) + F21*G[49] + F22*G[213] + F23*G[158] + F27*G[51] + F28*G[204] + F29*G[156] + F3*(F0*(F21*G[15] + F22*G[190] + F23*G[117]) + F18*(F0*G[14] + F1*G[15] + F2*G[16] + F5*G[49] + F7*G[65] + F8*G[66] + G[63]*(F3 + F4)) + F19*(F0*G[189] + F1*G[190] + F2*G[191] + F5*G[213] + F7*G[215] + F8*G[204] + G[212]*(F3 + F4)) + F20*(F0*G[116] + F1*G[117] + F2*G[118] + F5*G[158] + F7*G[160] + F8*G[161] + G[157]*(F3 + F4)) + F3*(F21*G[90] + F22*G[217] + F23*G[168])) + F30*(F21*G[91] + F22*G[218] + F23*G[169]) + F4*(F0*(F18*G[15] + F19*G[190] + F20*G[117]) + F1*(F21*G[37] + F22*G[198] + F23*G[134]) + F15*G[49] + F16*G[213] + F17*G[158] + F2*(F21*G[14] + F22*G[189] + F23*G[116]) + F4*(F21*G[92] + F22*G[219] + F23*G[170])) + F5*(F0*(F18*G[16] + F19*G[191] + F20*G[118]) + F15*G[50] + F16*G[248] + F17*G[246] + F21*(F1*G[14] + F2*G[71] + F4*G[93] + F5*G[49]) + F22*(F1*G[189] + F2*G[210] + F4*G[220] + F5*G[213]) + F23*(F1*G[116] + F2*G[152] + F4*G[171] + F5*G[158])) + F6*(F0*(F21*G[18] + F22*G[193] + F23*G[120]) + F18*(F0*G[17] + F1*G[18] + F2*G[19] + F3*G[64] + F4*G[65] + F5*G[66] + F8*G[68] + G[67]*(F6 + F7)) + F19*(F0*G[192] + F1*G[193] + F2*G[194] + F3*G[214] + F4*G[215] + F5*G[204] + F8*G[206] + G[216]*(F6 + F7)) + F20*(F0*G[119] + F1*G[120] + F2*G[121] + F3*G[159] + F4*G[160] + F5*G[161] + F8*G[145] + G[162]*(F6 + F7)) + F3*(F21*G[65] + F22*G[215] + F23*G[160]) + F6*(F21*G[96] + F22*G[223] + F23*G[174])) + F7*(F0*(F18*G[18] + F19*G[193] + F20*G[120]) + F15*G[108] + F16*G[204] + F17*G[143] + F21*(F1*G[38] + F2*G[17] + F4*G[94] + F5*G[64] + F7*G[97]) + F22*(F1*G[199] + F2*G[192] + F4*G[221] + F5*G[214] + F7*G[224]) + F23*(F1*G[135] + F2*G[119] + F4*G[172] + F5*G[159] + F7*G[175])) + F8*(F0*(F18*G[19] + F19*G[194] + F20*G[121]) + F15*G[229] + F16*G[205] + F17*G[144] + F21*(F1*G[17] + F2*G[72] + F4*G[64] + F5*G[95] + F7*G[98] + F8*G[68]) + F22*(F1*G[192] + F2*G[211] + F4*G[214] + F5*G[222] + F7*G[225] + F8*G[206]) + F23*(F1*G[119] + F2*G[153] + F4*G[159] + F5*G[173] + F7*G[176] + F8*G[145])));
      
      // Number of operations: 69
      I[9] = W4[ip]*(F0*(F24*G[249] + F25*G[250] + F26*G[251]) + F15*G[255] + F16*G[256] + F17*G[257] + F27*(F1*G[252] + F2*G[258] + F4*G[267] + F5*G[268] + F7*G[269] + F8*G[270]) + F28*(F1*G[253] + F2*G[259] + F4*G[271] + F5*G[272] + F7*G[273] + F8*G[274]) + F29*(F1*G[254] + F2*G[260] + F4*G[275] + F5*G[276] + F7*G[277] + F8*G[278]) + F3*(F24*G[261] + F25*G[263] + F26*G[265]) + F6*(G[279] + F24*G[262] + F25*G[264] + F26*G[266]) + F7*G[280]);
      
      // Number of operations: 69
      I[10] = W4[ip]*(F0*(G[279] + F10*G[250] + F11*G[251] + F9*G[249]) + F1*G[280] + F12*(F1*G[252] + F2*G[258] + F4*G[267] + F5*G[268] + F7*G[269] + F8*G[270]) + F13*(F1*G[253] + F2*G[259] + F4*G[271] + F5*G[272] + F7*G[273] + F8*G[274]) + F14*(F1*G[254] + F2*G[260] + F4*G[275] + F5*G[276] + F7*G[277] + F8*G[278]) + F15*G[281] + F16*G[282] + F17*G[283] + F3*(F10*G[263] + F11*G[265] + F9*G[261]) + F6*(F10*G[264] + F11*G[266] + F9*G[262]));
      
      // Number of operations: 69
      I[11] = W4[ip]*(F0*(F18*G[249] + F19*G[250] + F20*G[251]) + F15*G[284] + F16*G[285] + F17*G[286] + F21*(F1*G[252] + F2*G[258] + F4*G[267] + F5*G[268] + F7*G[269] + F8*G[270]) + F22*(F1*G[253] + F2*G[259] + F4*G[271] + F5*G[272] + F7*G[273] + F8*G[274]) + F23*(F1*G[254] + F2*G[260] + F4*G[275] + F5*G[276] + F7*G[277] + F8*G[278]) + F3*(G[279] + F18*G[261] + F19*G[263] + F20*G[265]) + F4*G[280] + F6*(F18*G[262] + F19*G[264] + F20*G[266]));
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 24
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
        // Number of operations to compute entry: 2
        A[nzc3[j]] += FE0[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc7[j]] += FE0[ip][j]*I[11];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_exterior_facet_integral_1_0::nsemomentum3d_exterior_facet_integral_1_0() : ufc::exterior_facet_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_exterior_facet_integral_1_0::~nsemomentum3d_exterior_facet_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local exterior facet
void nsemomentum3d_exterior_facet_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c,
                                    unsigned int facet) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x[v0][1]*x[v1][2] + x[v0][2]*x[v2][1] + x[v1][1]*x[v2][2]) - (x[v2][1]*x[v1][2] + x[v2][2]*x[v0][1] + x[v1][1]*x[v0][2]);
    
    const double a1 = (x[v0][2]*x[v1][0] + x[v0][0]*x[v2][2] + x[v1][2]*x[v2][0]) - (x[v2][2]*x[v1][0] + x[v2][0]*x[v0][2] + x[v1][2]*x[v0][0]);
    
    const double a2 = (x[v0][0]*x[v1][1] + x[v0][1]*x[v2][0] + x[v1][0]*x[v2][1]) - (x[v2][0]*x[v1][1] + x[v2][1]*x[v0][0] + x[v1][0]*x[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE1_f0_C0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {8, 9, 10};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 3.
    double G[2];
    G[0] = 0.0;
    G[1] = -0.5*det*w[8][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 702
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 702
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        
        // Total number of operations to compute function values = 54
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc0[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc1[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc2[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc0[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc1[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc2[r]];
          F6 += FE1_f0_C0[ip][r]*w[6][nzc0[r]];
          F7 += FE1_f0_C0[ip][r]*w[6][nzc1[r]];
          F8 += FE1_f0_C0[ip][r]*w[6][nzc2[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 45
        double I[3];
        // Number of operations: 15
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc0[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc1[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc2[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 702
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 702
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        
        // Total number of operations to compute function values = 54
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc3[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc4[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc5[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc3[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc4[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc5[r]];
          F6 += FE1_f0_C0[ip][r]*w[6][nzc3[r]];
          F7 += FE1_f0_C0[ip][r]*w[6][nzc4[r]];
          F8 += FE1_f0_C0[ip][r]*w[6][nzc5[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 45
        double I[3];
        // Number of operations: 15
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc3[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc4[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 702
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 702
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        
        // Total number of operations to compute function values = 54
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc6[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc7[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc8[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc6[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc7[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc8[r]];
          F6 += FE1_f0_C0[ip][r]*w[6][nzc6[r]];
          F7 += FE1_f0_C0[ip][r]*w[6][nzc7[r]];
          F8 += FE1_f0_C0[ip][r]*w[6][nzc8[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 45
        double I[3];
        // Number of operations: 15
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc6[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc7[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc8[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 702
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 702
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        
        // Total number of operations to compute function values = 54
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[7][nzc9[r]];
          F1 += FE1_f0_C0[ip][r]*w[7][nzc10[r]];
          F2 += FE1_f0_C0[ip][r]*w[7][nzc11[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc9[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc10[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc11[r]];
          F6 += FE1_f0_C0[ip][r]*w[6][nzc9[r]];
          F7 += FE1_f0_C0[ip][r]*w[6][nzc10[r]];
          F8 += FE1_f0_C0[ip][r]*w[6][nzc11[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 45
        double I[3];
        // Number of operations: 15
        I[0] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[1] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        // Number of operations: 15
        I[2] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F7 + F2*F8));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc10[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc11[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc9[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local exterior facet
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_exterior_facet_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_form_0::nsemomentum3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_form_0::~nsemomentum3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum3d_form_0::signature() const
{
    return "Form([Integral(Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5)), Sum(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(1), Index(0)), {Index(0): 3, Index(1): 3})), MultiIndex((Index(2), Index(3)), {Index(2): 3, Index(3): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(5),), {Index(5): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(6),), {Index(6): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7), Index(6)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(8),), {Index(8): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(5),), {Index(5): 3}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(1), Index(0)), {Index(0): 3, Index(1): 3})), MultiIndex((Index(2), Index(3)), {Index(2): 3, Index(3): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(5),), {Index(5): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7), Index(6)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(9),), {Index(9): 3}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(6),), {Index(6): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7), Index(6)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(9),), {Index(9): 3})))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(5),), {Index(5): 3})))), MultiIndex((Index(5),), {Index(5): 3})), Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(13),), {Index(13): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(13),), {Index(13): 3})), MultiIndex((Index(13),), {Index(13): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(14),), {Index(14): 3}))))), Sum(Division(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(15),), {Index(15): 3})), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(15),), {Index(15): 3}))), MultiIndex((Index(15),), {Index(15): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(20),), {Index(20): 3}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((Index(16),), {Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((Index(23), Index(22)), {Index(22): 3, Index(23): 3})), MultiIndex((Index(24), Index(25)), {Index(24): 3, Index(25): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(27), Index(26)), {Index(26): 3, Index(27): 3})), MultiIndex((Index(24), Index(25)), {Index(24): 3, Index(25): 3}))), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(25),), {Index(25): 3})))))), Measure('cell', 0, None)), Integral(Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(28),), {Index(28): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(29),), {Index(29): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(29),), {Index(29): 3}))), MultiIndex((Index(29),), {Index(29): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3))))), Measure('exterior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum3d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum3d_form_0::num_coefficients() const
{
    return 10;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_0::num_exterior_facet_domains() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_0::num_exterior_facet_integrals() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_exterior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsemomentum3d_form_1::nsemomentum3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_form_1::~nsemomentum3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum3d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(IntValue(-1, (), (), {}), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5)), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(1), Index(0)), {Index(0): 3, Index(1): 3})), MultiIndex((Index(2), Index(3)), {Index(2): 3, Index(3): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(5),), {Index(5): 3}))), MultiIndex((Index(5),), {Index(5): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(6),), {Index(6): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(7),), {Index(7): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8), Index(7)), {Index(7): 3, Index(8): 3})), MultiIndex((Index(9), Index(10)), {Index(10): 3, Index(9): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(9),), {Index(9): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(12),), {Index(12): 3})), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(6),), {Index(6): 3}))), MultiIndex((Index(6),), {Index(6): 3})), Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(13),), {Index(13): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(13),), {Index(13): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(13),), {Index(13): 3})), MultiIndex((Index(13),), {Index(13): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(14),), {Index(14): 3}))))), Sum(Division(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(15),), {Index(15): 3})), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(16),), {Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3}))), MultiIndex((Index(15),), {Index(15): 3}))), MultiIndex((Index(15),), {Index(15): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(18),), {Index(18): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((Index(19), Index(18)), {Index(19): 3, Index(18): 3})), MultiIndex((Index(20), Index(21)), {Index(21): 3, Index(20): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(22),), {Index(22): 3}))), MultiIndex((Index(22),), {Index(22): 3}))), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((Index(20),), {Index(20): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(17),), {Index(17): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(24),), {Index(24): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(25), Index(24)), {Index(24): 3, Index(25): 3})), MultiIndex((Index(26), Index(27)), {Index(26): 3, Index(27): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(29), Index(28)), {Index(29): 3, Index(28): 3})), MultiIndex((Index(26), Index(27)), {Index(26): 3, Index(27): 3}))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((Index(27),), {Index(27): 3}))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5)), Sum(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(31), Index(30)), {Index(31): 3, Index(30): 3})), MultiIndex((Index(2), Index(3)), {Index(2): 3, Index(3): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(32),), {Index(32): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(33),), {Index(33): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(33),), {Index(33): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(34),), {Index(34): 3})), MultiIndex((Index(34), Index(33)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(9), Index(10)), {Index(10): 3, Index(9): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(9),), {Index(9): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((Index(35),), {Index(35): 3}))), MultiIndex((Index(32),), {Index(32): 3}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(31), Index(30)), {Index(31): 3, Index(30): 3})), MultiIndex((Index(2), Index(3)), {Index(2): 3, Index(3): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(5),), {Index(5): 3}))), MultiIndex((Index(5),), {Index(5): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(32),), {Index(32): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(33),), {Index(33): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(34),), {Index(34): 3})), MultiIndex((Index(34), Index(33)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(9), Index(10)), {Index(10): 3, Index(9): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(33),), {Index(33): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(33),), {Index(33): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(34),), {Index(34): 3})), MultiIndex((Index(34), Index(33)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(9), Index(10)), {Index(10): 3, Index(9): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(10),), {Index(10): 3})))), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(32),), {Index(32): 3})))), MultiIndex((Index(32),), {Index(32): 3})), Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((Index(36),), {Index(36): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((Index(37),), {Index(37): 3}))))), Sum(Division(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(38),), {Index(38): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(38),), {Index(38): 3}))), MultiIndex((Index(38),), {Index(38): 3})), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(39),), {Index(39): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(41),), {Index(41): 3})), MultiIndex((Index(41), Index(40)), {Index(40): 3, Index(41): 3})), MultiIndex((Index(20), Index(21)), {Index(21): 3, Index(20): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(22),), {Index(22): 3}))), MultiIndex((Index(22),), {Index(22): 3}))), MultiIndex((Index(21),), {Index(21): 3}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(40),), {Index(40): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(40),), {Index(40): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(41),), {Index(41): 3})), MultiIndex((Index(41), Index(40)), {Index(40): 3, Index(41): 3})), MultiIndex((Index(20), Index(21)), {Index(21): 3, Index(20): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((Index(39),), {Index(39): 3}))), MultiIndex((Index(39),), {Index(39): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(42),), {Index(42): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(43),), {Index(43): 3})), MultiIndex((Index(43), Index(42)), {Index(43): 3, Index(42): 3})), MultiIndex((Index(44), Index(45)), {Index(44): 3, Index(45): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(46),), {Index(46): 3})), MultiIndex((Index(47),), {Index(47): 3})), MultiIndex((Index(47), Index(46)), {Index(46): 3, Index(47): 3})), MultiIndex((Index(44), Index(45)), {Index(44): 3, Index(45): 3}))), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(45),), {Index(45): 3}))))))), Measure('cell', 0, None)), Integral(Sum(Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(48),), {Index(48): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(48),), {Index(48): 3}))), MultiIndex((Index(48),), {Index(48): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(49),), {Index(49): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(49),), {Index(49): 3}))), MultiIndex((Index(49),), {Index(49): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3))))), Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(50),), {Index(50): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(50),), {Index(50): 3}))), MultiIndex((Index(50),), {Index(50): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(51),), {Index(51): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(51),), {Index(51): 3}))), MultiIndex((Index(51),), {Index(51): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3))))))), Measure('exterior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum3d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum3d_form_1::num_coefficients() const
{
    return 10;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_1::num_exterior_facet_domains() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_1::num_exterior_facet_integrals() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_exterior_facet_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

